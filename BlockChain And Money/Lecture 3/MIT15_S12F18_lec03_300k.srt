0
00:00:00,900 --> 00:00:04,440
The following content is provided under a Creative Commons license 

1
00:00:04,450 --> 00:00:10,660
Your support will help MIT Open courseware continue to offer high quality educational resources for free 

2
00:00:10,830 --> 00:00:15,290
To make a donation or to view additional materials from hundreds of MIT courses

3
00:00:15,640 --> 00:00:20,440
 visit MIT Open Courseware at OCW dot MIT dot e d U 

4
00:00:23,630 --> 00:00:28,270
I just want to say how touched I am that you are all still here 

5
00:00:28,730 --> 00:00:29,640
I really

6
00:00:30,470 --> 00:00:30,800
 you know

7
00:00:30,860 --> 00:00:34,010
 there's a lot of shopping opportunities in the MIT 

8
00:00:35,060 --> 00:00:36,080
Courses 

9
00:00:36,780 --> 00:00:40,583
And that you have come back and not shaken 

10
00:00:40,583 --> 00:00:41,344
Lewis

11
00:00:41,344 --> 00:00:44,767
 after reading Satoshi Nakamoto's 

12
00:00:45,528 --> 00:00:47,810
Peer to peer Bitcoin paper 

13
00:00:49,780 --> 00:00:55,150
Or maybe you just came back to see whether I was going to crash and burn describing it 

14
00:00:56,400 --> 00:01:10,420
But what we're going to try to do in the next three classes just to frame it is really give you some of the technical underpinnings of blockchain technology through the lens of Bitcoin 

15
00:01:10,420 --> 00:01:15,080
Bitcoin is just the first use case of blockchain technology 

16
00:01:15,780 --> 00:01:17,930
So if I often say Bitcoin

17
00:01:17,930 --> 00:01:18,670
 this or Bitcoin

18
00:01:18,670 --> 00:01:24,730
 that it's really largely not entirely largely applicable to blockchain technology

19
00:01:25,300 --> 00:01:29,750
 My feeling is I'm only about 8 or 9 months ahead of all of you 

20
00:01:29,840 --> 00:01:36,120
I may have spent my whole professional life around finance and public service

21
00:01:36,150 --> 00:01:40,620
 and I can talk a lot about markets and about public policy 

22
00:01:40,640 --> 00:01:45,810
But MIT has given me the gift of thinking about blockchain technology 

23
00:01:46,320 --> 00:01:49,890
And I'm trying to return that gift a little bit for you all 

24
00:01:50,280 --> 00:01:55,370
And I have a few computer scientists in the room that are gonna bail me out if I don't get this right 

25
00:01:55,650 --> 00:01:56,280
Sabrina

26
00:01:56,310 --> 00:01:56,670
 and then

27
00:01:56,680 --> 00:01:56,790
 oh

28
00:01:56,810 --> 00:01:59,360
 I see Elaine is putting up his

29
00:01:59,810 --> 00:02:00,650
 do you all know a lean 

30
00:02:00,650 --> 00:02:04,300
He's actually a Ph D student MIT computer science so 

31
00:02:07,620 --> 00:02:11,330
Somebody gets to that part of their life thinking

32
00:02:11,330 --> 00:02:11,860
 yeah

33
00:02:12,140 --> 00:02:12,482
 what

34
00:02:12,482 --> 00:02:14,535
 what was that terrible

35
00:02:14,535 --> 00:02:15,561
 terrible

36
00:02:15,561 --> 00:02:16,587
 like choice 

37
00:02:16,587 --> 00:02:16,930
Yeah

38
00:02:18,110 --> 00:02:20,430
 but he is going to bail us all out 

39
00:02:20,440 --> 00:02:35,880
But the reason that I think it's relevant not to just belabor it is I really believe the only way that any of us can get to ground truths is to know a little bit about how the inner workings of this technology are 

40
00:02:36,540 --> 00:02:41,420
You're not going to have to do an algorithm or actually do a hash function

41
00:02:41,480 --> 00:02:43,630
 but to know underneath it 

42
00:02:43,680 --> 00:02:48,370
And then you can step away and say I no longer need to know how the carburetor on the car works 

43
00:02:48,390 --> 00:02:52,630
But I know what a carburetor is or you know

44
00:02:52,830 --> 00:02:54,840
 whatever analogy you want 

45
00:02:55,740 --> 00:02:57,380
So with that little bit

46
00:02:59,190 --> 00:03:05,300
 as opposed to sort of all that Socratic code calling that I did last class because money

47
00:03:05,480 --> 00:03:14,480
 fiat currency is something at the core and ledgers is at the core of a Sloane students either education or background 

48
00:03:14,870 --> 00:03:19,040
This is a little less of the core if today's and the next couple of lectures

49
00:03:19,040 --> 00:03:23,600
 if you can work with me that I want you to interrupt me any time You've got a question

50
00:03:24,120 --> 00:03:26,280
 I'm not going to do much cold calling

51
00:03:26,610 --> 00:03:28,470
 so I don't want you to relax too much 

52
00:03:28,480 --> 00:03:30,080
I still want you to do the readings

53
00:03:30,080 --> 00:03:31,950
 the next three classes

54
00:03:31,960 --> 00:03:33,600
 but just raise your hand 

55
00:03:33,720 --> 00:03:34,810
Stop me say well

56
00:03:35,050 --> 00:03:35,740
 But what 

57
00:03:35,750 --> 00:03:37,480
What is that all about 

58
00:03:37,510 --> 00:03:41,600
And that is just so that we can work a little bit different on these 

59
00:03:42,120 --> 00:03:42,640
Next

60
00:03:43,120 --> 00:03:43,910
 classes 

61
00:03:44,800 --> 00:03:48,820
So as I've always gonna be doing consistency

62
00:03:49,610 --> 00:03:51,370
 what are the study questions 

63
00:03:51,380 --> 00:03:52,860
And so really

64
00:03:52,860 --> 00:03:54,250
 what are the design features 

65
00:03:54,250 --> 00:03:57,850
What are the key design features of this new technology 

66
00:03:57,860 --> 00:03:58,840
Blockchain 

67
00:03:59,150 --> 00:04:01,850
And I put a few on the syllabus 

68
00:04:01,850 --> 00:04:03,720
And we're gonna go through all this today 

69
00:04:04,150 --> 00:04:05,480
And next week 

70
00:04:05,490 --> 00:04:06,790
Cryptography

71
00:04:06,800 --> 00:04:09,420
 appendix only time stamps

72
00:04:09,850 --> 00:04:10,720
 blocks

73
00:04:10,860 --> 00:04:14,330
 distributed consensus algorithms and networking 

74
00:04:14,340 --> 00:04:17,620
I list later in this lecture

75
00:04:17,620 --> 00:04:22,110
 you'll see 8 or 10 that I guess it's 10 that we're going to really dig

76
00:04:22,140 --> 00:04:23,420
 dig into 

77
00:04:24,460 --> 00:04:26,290
Can I just get a sense of the class 

78
00:04:26,290 --> 00:04:30,880
And this is not first Toledo or Sabrina to write down notes about participation 

79
00:04:32,390 --> 00:04:33,960
Is it a decent assumption 

80
00:04:33,960 --> 00:04:37,900
Did did most of or all of you at least read Nakomoto paper 

81
00:04:38,410 --> 00:04:38,750
Alright

82
00:04:38,760 --> 00:04:39,150
 good 

83
00:04:39,680 --> 00:04:39,990
All right

84
00:04:40,060 --> 00:04:40,540
 great 

85
00:04:42,020 --> 00:04:45,790
Just a sense how many of you felt you got at least half of it

86
00:04:45,800 --> 00:04:47,260
 maybe less than two-thirds

87
00:04:47,260 --> 00:04:48,500
 but at least half of it 

88
00:04:49,720 --> 00:04:50,190
All right 

89
00:04:50,290 --> 00:04:52,542
Pretty good when I first read it 

90
00:04:52,542 --> 00:04:53,825
I was around with you 

91
00:04:53,825 --> 00:04:54,681
So it's alright

92
00:04:54,681 --> 00:04:55,108
 Elaine

93
00:04:55,108 --> 00:04:56,605
 you got more than half of it

94
00:04:56,605 --> 00:04:57,033
 right 

95
00:04:57,033 --> 00:04:58,529
I read it 5 years ago 

96
00:04:58,529 --> 00:05:00,240
So you read it 5 years ago 

97
00:05:00,240 --> 00:05:01,095
Yeah

98
00:05:01,095 --> 00:05:01,950
 Life choices talk

99
00:05:01,950 --> 00:05:02,806
 talk about it 

100
00:05:02,806 --> 00:05:05,700
And alright 

101
00:05:07,530 --> 00:05:08,860
And you're taking this class 

102
00:05:09,480 --> 00:05:09,830
Good

103
00:05:10,180 --> 00:05:10,330
 good 

104
00:05:12,110 --> 00:05:13,460
So we'll go through each of those 

105
00:05:13,960 --> 00:05:16,290
And then more specifically

106
00:05:16,290 --> 00:05:18,940
 we're going to peel back the cryptography

107
00:05:19,010 --> 00:05:23,960
 the two main cryptographic algorithms

108
00:05:23,960 --> 00:05:27,760
 or these words that you'll hear sometimes cryptographic primitives 

109
00:05:28,840 --> 00:05:28,940
I mean

110
00:05:28,940 --> 00:05:30,390
 what is a cryptographic primitive 

111
00:05:30,600 --> 00:05:30,830
Oh

112
00:05:31,360 --> 00:05:32,090
 it's a wild beast 

113
00:05:32,540 --> 00:05:33,990
Or so many of them now 

114
00:05:33,990 --> 00:05:35,420
But what's the two words to gather information 

115
00:05:36,370 --> 00:05:36,499
Well

116
00:05:36,499 --> 00:05:37,273
 that's what I'm saying 

117
00:05:37,273 --> 00:05:37,790
It could be 

118
00:05:37,790 --> 00:05:38,048
I mean

119
00:05:38,048 --> 00:05:39,210
 it could be a hash function 

120
00:05:39,210 --> 00:05:40,630
It could be an encryption function 

121
00:05:40,630 --> 00:05:42,438
It could be a verifiable complication scheme 

122
00:05:42,438 --> 00:05:43,858
It could be a data outsourcing fee 

123
00:05:43,858 --> 00:05:45,150
It could be a data access private

124
00:05:46,410 --> 00:05:51,079
 but it's anything that basically protects a communication and the presence of adversaries 

125
00:05:51,079 --> 00:05:51,252
Well

126
00:05:51,252 --> 00:05:56,268
 it's also something that you can use to prove that computation was done correctly on our untrusted server 

127
00:05:56,268 --> 00:05:57,652
So it's not just communication

128
00:05:57,652 --> 00:05:58,690
 corporate production 

129
00:05:59,510 --> 00:06:09,650
So communications and computation that needs to be protected or verified have some form of cryptographic algorithm

130
00:06:09,650 --> 00:06:11,810
 which happens to be called a cryptographic primitive 

131
00:06:12,160 --> 00:06:14,080
The two main ones 

132
00:06:14,160 --> 00:06:16,820
And there's a third one we'll talk about later in this semester 

133
00:06:16,820 --> 00:06:17,840
But the two main ones

134
00:06:18,260 --> 00:06:19,210
 hash function

135
00:06:20,060 --> 00:06:23,890
 just as a working knowledge of blockchain is worthy to know 

136
00:06:23,890 --> 00:06:24,240
And we're going to

137
00:06:24,820 --> 00:06:25,680
 we're going to get

138
00:06:25,740 --> 00:06:26,890
 everybody's gonna get there 

139
00:06:26,900 --> 00:06:30,490
We're going to all get there the way you have some sense of what a hash function is 

140
00:06:31,060 --> 00:06:33,780
And then this whole concept of digital signatures

141
00:06:33,780 --> 00:06:36,590
 which relates to asymmetric cryptography 

142
00:06:37,030 --> 00:06:42,080
Those two are very fundamental to blockchain technology 

143
00:06:42,090 --> 00:06:43,120
Later in the semester

144
00:06:43,120 --> 00:06:45,570
 we'll talk a little bit about zero knowledge proofs

145
00:06:46,250 --> 00:06:50,390
 but they're not as fundamental to the first application 

146
00:06:51,030 --> 00:06:52,590
And so that's why they're

147
00:06:52,600 --> 00:06:52,870
 you know

148
00:06:52,880 --> 00:06:53,260
 kind of 

149
00:06:53,490 --> 00:06:56,270
And they help making things verifiable and immutable 

150
00:06:56,300 --> 00:06:57,650
And that's the business side 

151
00:06:57,650 --> 00:06:58,300
The market side 

152
00:06:58,300 --> 00:07:00,960
Why does it matter otherwise 

153
00:07:00,960 --> 00:07:01,130
Like

154
00:07:01,130 --> 00:07:04,030
 who cares what's in the carburetor if it doesn't matter 

155
00:07:05,810 --> 00:07:09,050
And then how does this all relate to the double spend problem 

156
00:07:09,050 --> 00:07:10,040
I can call it Carlo 

157
00:07:10,040 --> 00:07:11,300
And on this visibility

158
00:07:11,310 --> 00:07:18,020
 do you remember what the double spend problem was from the it was when that they would use the same coin

159
00:07:18,020 --> 00:07:18,470
 I guess

160
00:07:18,480 --> 00:07:20,620
 And then use it in multiple places and other Linkedin 

161
00:07:20,890 --> 00:07:22,010
Cold digital wallets are pursued 

162
00:07:23,120 --> 00:07:23,970
So in essence

163
00:07:23,970 --> 00:07:30,210
 a double spend is when you have a piece of information and you use it twice 

164
00:07:30,220 --> 00:07:32,790
And we have to call this piece of information money 

165
00:07:32,800 --> 00:07:34,250
But you use it twice 

166
00:07:34,440 --> 00:07:36,150
You can send an email to two people 

167
00:07:36,150 --> 00:07:37,430
And that's okay 

168
00:07:37,870 --> 00:07:38,190
I mean

169
00:07:38,190 --> 00:07:43,260
 it's a little embarrassing if you're sending it to one friend telling them you are available for dinner 

170
00:07:43,260 --> 00:07:46,500
And the other friend thought you told him you weren't available

171
00:07:46,500 --> 00:07:49,090
 but you can still send it to two places 

172
00:07:49,100 --> 00:07:50,830
But in the system of money

173
00:07:50,840 --> 00:07:54,240
 it's a critical thing that you don't use it twice 

174
00:07:55,730 --> 00:07:56,590
The readings 

175
00:07:58,280 --> 00:07:59,840
Was the demo helpful 

176
00:07:59,880 --> 00:08:00,210
I mean

177
00:08:00,210 --> 00:08:00,490
 we're going to

178
00:08:00,560 --> 00:08:04,310
 we're going to do a lot more on the I watched that demo list November

179
00:08:04,310 --> 00:08:05,130
 December 

180
00:08:05,140 --> 00:08:09,120
It was one of the first things I watched from an MIT student 

181
00:08:09,550 --> 00:08:11,620
I don't know if you knew this Bosworth

182
00:08:12,910 --> 00:08:14,680
 and I found it very helpful 

183
00:08:14,680 --> 00:08:15,420
So I'm clear that 

184
00:08:15,560 --> 00:08:20,310
And I see it's actually that demo is on a Stanford blockchain course as well 

185
00:08:20,530 --> 00:08:22,280
So on the West Coast

186
00:08:22,280 --> 00:08:25,240
 one of our competitors is using an MIT product 

187
00:08:27,310 --> 00:08:28,730
And so we're gonna

188
00:08:28,860 --> 00:08:32,620
 we're going to just do a slight review of what we did in class 2 

189
00:08:32,630 --> 00:08:35,670
And then we're going to talk about the key design features

190
00:08:35,670 --> 00:08:36,480
 hash functions 

191
00:08:36,480 --> 00:08:37,670
As I mentioned

192
00:08:37,680 --> 00:08:38,750
 what is an append 

193
00:08:38,750 --> 00:08:43,320
Only log block headers and Merkel trees

194
00:08:43,860 --> 00:08:46,450
 an asymmetric cryptography and digital signatures 

195
00:08:46,450 --> 00:08:47,010
Crazy

196
00:08:47,010 --> 00:08:49,200
 we're gonna cover all five of those today 

197
00:08:50,990 --> 00:08:53,450
And then you're going to tell me how we did 

198
00:08:53,460 --> 00:08:53,960
Oh

199
00:08:54,040 --> 00:08:54,820
 Bitcoin addresses

200
00:08:54,820 --> 00:08:56,010
 which is just a small thing

201
00:08:56,010 --> 00:08:56,670
 Six

202
00:08:56,810 --> 00:08:57,230
 actually

203
00:08:57,240 --> 00:08:57,270
 like

204
00:08:58,590 --> 00:09:01,940
 so last time for those of you that work with us

205
00:09:01,940 --> 00:09:03,200
 we talked about money 

206
00:09:03,210 --> 00:09:03,660
And again

207
00:09:03,670 --> 00:09:08,360
 money is just a social construct or an economic consensus mechanism 

208
00:09:08,360 --> 00:09:14,510
We're going to talk a lot about consensus next Tuesday when we talk about the consensus protocol in Bitcoin 

209
00:09:14,870 --> 00:09:15,600
But remember

210
00:09:15,610 --> 00:09:18,070
 money itself is just a consensus 

211
00:09:18,200 --> 00:09:20,070
There was a question on Tuesday 

212
00:09:21,890 --> 00:09:24,580
I think a lean actually had asked this question about

213
00:09:24,600 --> 00:09:28,160
 but what does it mean to be a liability of the central bank 

214
00:09:28,160 --> 00:09:29,730
Why is money 

215
00:09:29,750 --> 00:09:31,510
What does that actually mean 

216
00:09:31,530 --> 00:09:34,150
And I said it just means that somebody else will accept it 

217
00:09:34,150 --> 00:09:39,130
It's a social consensus because it's not that they're going to give you anything else 

218
00:09:39,410 --> 00:09:41,100
It's just that you can get a bank deposit 

219
00:09:41,100 --> 00:09:42,380
You can pay your taxes 

220
00:09:42,380 --> 00:09:45,840
You can use it at Starbucks if in fact

221
00:09:45,840 --> 00:09:47,600
 you've already gotten a cup of coffee 

222
00:09:47,600 --> 00:09:48,670
If you remember

223
00:09:48,680 --> 00:09:53,220
 it's only legal tender for a debt and so forth 

224
00:09:53,530 --> 00:09:53,650
See

225
00:09:54,020 --> 00:09:54,040
 up 

226
00:09:54,050 --> 00:09:56,470
Money is just in that long line 

227
00:09:56,880 --> 00:09:59,030
But it's had its challenges and stabilities 

228
00:09:59,030 --> 00:10:01,010
It doesn't mean it's going to go away 

229
00:10:01,130 --> 00:10:02,610
I'm not a Bitcoin 

230
00:10:02,610 --> 00:10:05,450
Maximum lesson thinks that fiat currencies are going to go away

231
00:10:05,510 --> 00:10:09,130
 but fiat currencies have their instability is particularly around the world 

232
00:10:09,980 --> 00:10:12,670
A weak monetary policy 

233
00:10:13,260 --> 00:10:13,850
In essence

234
00:10:13,850 --> 00:10:20,440
 when you debase a currency and allow a lot of it to be issued or are usually around unstable fiscal policy 

235
00:10:20,440 --> 00:10:22,420
So either the government is spending a lot 

236
00:10:23,050 --> 00:10:29,323
The king is off to foreign wars and the bank of England was actually set up in the late 17th century

237
00:10:29,323 --> 00:10:29,972
 in essence

238
00:10:29,972 --> 00:10:33,000
 to control the currency when the king was of England 

239
00:10:33,000 --> 00:10:35,163
I think it was in wars with France 

240
00:10:35,163 --> 00:10:37,327
If I can recall a lot of banks

241
00:10:37,327 --> 00:10:41,437
 center banks were set up right about when a sovereign was was off

242
00:10:41,437 --> 00:10:44,682
 debasing a currency and spending too much at war

243
00:10:44,682 --> 00:10:49,190
 and I think that the ledgers we talked about ledgers

244
00:10:49,190 --> 00:10:51,030
 how critical ledgers are

245
00:10:51,060 --> 00:10:52,060
 In essence

246
00:10:52,080 --> 00:10:54,950
 ledgers are a way to keep records

247
00:10:55,580 --> 00:10:59,960
 and those records could either be transaction records or balanced records 

248
00:10:59,960 --> 00:11:06,420
We'll see that Bitcoin is set up as a transaction ledger later 

249
00:11:06,420 --> 00:11:10,310
We're going to be talking about other blockchain technologies that are set up as balanced ledgers 

250
00:11:10,310 --> 00:11:16,560
So one should not just think immutably that there's only one way to do this

251
00:11:16,570 --> 00:11:20,730
 but transactions and ledgers are at the core of Bitcoin 

252
00:11:21,450 --> 00:11:23,060
And central banking is

253
00:11:23,070 --> 00:11:23,640
 of course

254
00:11:23,650 --> 00:11:24,920
 built on ledgers 

255
00:11:25,420 --> 00:11:27,250
The master ledger of the central bank

256
00:11:27,250 --> 00:11:30,040
 And then the commercial banks have sort of the subledgers 

257
00:11:30,370 --> 00:11:32,960
And then you can think sometimes your digital wallet

258
00:11:32,970 --> 00:11:35,550
 maybe Starbucks has yet a third tier ledger 

259
00:11:36,690 --> 00:11:39,770
We obviously live in an electronic age already 

260
00:11:39,780 --> 00:11:40,960
We know this 

261
00:11:40,980 --> 00:11:42,580
There has been many efforts 

262
00:11:42,590 --> 00:11:47,720
They've all died until Bitcoin to crack that riddle that we talked about

263
00:11:47,750 --> 00:11:53,290
 peer to peer money without a central authority 

264
00:11:53,860 --> 00:11:55,720
And later in the semester when we talk about 

265
00:11:57,860 --> 00:11:59,630
What are the use cases 

266
00:12:00,480 --> 00:12:02,090
That's gonna be the core thing 

267
00:12:02,590 --> 00:12:03,200
And why 

268
00:12:03,200 --> 00:12:04,370
I'm not a Maximus 

269
00:12:04,370 --> 00:12:05,010
I'm not sure 

270
00:12:05,010 --> 00:12:06,660
In every circumstance

271
00:12:07,310 --> 00:12:12,250
 essential with intermediary isn't necessarily so bad 

272
00:12:12,580 --> 00:12:14,130
And this is not a value judgment 

273
00:12:14,140 --> 00:12:16,830
This is just pure money and markets and so forth 

274
00:12:17,140 --> 00:12:18,640
But in some circumstances

275
00:12:18,640 --> 00:12:23,200
 decentralization really will compete and beat the centralized intermediary 

276
00:12:24,200 --> 00:12:28,380
So let's talk about his little paper

277
00:12:28,770 --> 00:12:29,610
 which of course

278
00:12:29,610 --> 00:12:32,650
 he was modest or she was modest 

279
00:12:33,620 --> 00:12:34,370
Please remind me

280
00:12:34,370 --> 00:12:40,110
 we don't know who Nakamoto is is or was or a group of people 

281
00:12:40,120 --> 00:12:46,830
I've been working on a new electronic cash system that's fully peer-to-peer with no trusted third party 

282
00:12:49,430 --> 00:12:52,830
So you've seen this slide before

283
00:12:52,840 --> 00:12:55,690
 but a time stamped a patent only law 

284
00:12:55,700 --> 00:12:57,470
Just think blocks of data

285
00:12:57,620 --> 00:12:57,910
 you know

286
00:12:58,280 --> 00:12:59,810
 to kind of oversimplify 

287
00:12:59,810 --> 00:13:01,330
But it's got a name

288
00:13:01,350 --> 00:13:02,640
 blockchain technology 

289
00:13:03,260 --> 00:13:05,070
And I don't think that Satoshi paper

290
00:13:05,070 --> 00:13:07,130
 you all read it in the last few days 

291
00:13:07,240 --> 00:13:07,610
I

292
00:13:07,620 --> 00:13:08,130
 of course

293
00:13:08,140 --> 00:13:11,660
 read it again yesterday just to make sure I remembered it was 

294
00:13:12,030 --> 00:13:14,120
I don't remember that he ever used the word blockchain 

295
00:13:14,580 --> 00:13:16,150
Am I right about that 

296
00:13:17,060 --> 00:13:25,350
So the words blockchain really have been sort of layered over his innovation 

297
00:13:25,370 --> 00:13:28,170
So information blocks going on 

298
00:13:28,250 --> 00:13:30,850
And that leads to basically a database 

299
00:13:31,620 --> 00:13:33,150
But it's the blocks of data 

300
00:13:33,520 --> 00:13:37,210
Bitcoin right now is about 550000 blocks 

301
00:13:37,670 --> 00:13:41,410
And the blocks are added on average every 10 minutes 

302
00:13:42,500 --> 00:13:44,760
And we'll talk about why it's every 10 minutes 

303
00:13:44,810 --> 00:13:49,650
And not only why Satoshi Nakomoto made it every 10 minutes

304
00:13:49,660 --> 00:13:53,420
 but how they maintain that other blockchains like Ethereum

305
00:13:53,440 --> 00:13:55,250
 It's about every 7 seconds

306
00:13:55,310 --> 00:13:58,300
 so don't get too caught up that it's all the same thing 

307
00:13:58,820 --> 00:14:02,650
And there are some technologists here 

308
00:14:02,670 --> 00:14:05,170
Sylvia McCully is working on algorithm 

309
00:14:05,380 --> 00:14:07,210
And that's even tighter

310
00:14:07,220 --> 00:14:08,720
 less than 7 seconds 

311
00:14:08,730 --> 00:14:11,090
So there's not one way 

312
00:14:11,100 --> 00:14:14,670
There's multiple designs on how often blocks are at it 

313
00:14:14,870 --> 00:14:19,350
But let's start with Bitcoin secured by 

314
00:14:19,360 --> 00:14:19,800
Yes

315
00:14:19,810 --> 00:14:20,340
 guess what 

316
00:14:20,340 --> 00:14:22,530
Those two cryptographic primitives

317
00:14:22,540 --> 00:14:23,650
 hash functions

318
00:14:23,660 --> 00:14:25,090
 and digital signatures 

319
00:14:26,940 --> 00:14:28,380
We lose anybody yet 

320
00:14:28,390 --> 00:14:28,970
Yeah

321
00:14:28,980 --> 00:14:29,190
 maybe 

322
00:14:30,170 --> 00:14:33,990
And then there's a consensus for agreement 

323
00:14:34,550 --> 00:14:35,940
The whole debate

324
00:14:35,970 --> 00:14:40,450
 usually about databases is who gets to change the data 

325
00:14:41,470 --> 00:14:43,560
And this is true in all databases 

326
00:14:43,560 --> 00:14:44,260
In essence

327
00:14:44,260 --> 00:14:45,780
 it's usually centralized

328
00:14:45,920 --> 00:14:46,750
 but in blockchain

329
00:14:46,750 --> 00:14:47,510
 it's all of a sudden

330
00:14:47,510 --> 00:14:47,640
 well

331
00:14:47,640 --> 00:14:49,330
 maybe it's not centralized 

332
00:14:49,340 --> 00:14:51,710
Who gets to add that next bit of information 

333
00:14:51,710 --> 00:14:58,510
The next block and the consensus agreement is which we'll discuss next Tuesday is about that very issue 

334
00:14:59,240 --> 00:15:03,870
And I think there was a little pretty picture that I've done in slides before

335
00:15:03,880 --> 00:15:04,510
 but I'm going to

336
00:15:04,540 --> 00:15:07,540
 I'm going to delay that discussion until next Tuesday 

337
00:15:07,950 --> 00:15:09,680
And hopefully you all come back 

338
00:15:10,260 --> 00:15:12,710
So what are the key features 

339
00:15:13,380 --> 00:15:15,400
And I might do a little cold call 

340
00:15:15,410 --> 00:15:15,500
Like

341
00:15:15,510 --> 00:15:19,480
 do you remember any key feature tub and from from the papers 

342
00:15:20,330 --> 00:15:20,390
Hopefully 

343
00:15:22,120 --> 00:15:22,170
All right 

344
00:15:23,030 --> 00:15:23,270
I mean

345
00:15:23,350 --> 00:15:26,620
 you have the hash function or hash and any other key features 

346
00:15:26,620 --> 00:15:29,000
Let's see how many I'm going to have 10 on this page 

347
00:15:29,530 --> 00:15:30,350
Up on that 

348
00:15:30,350 --> 00:15:31,350
On a public key 

349
00:15:31,530 --> 00:15:32,180
What is that 

350
00:15:32,310 --> 00:15:33,800
Private public key 

351
00:15:35,530 --> 00:15:36,550
Private and public kid 

352
00:15:36,560 --> 00:15:37,040
Yes

353
00:15:37,050 --> 00:15:40,420
 so a symmetric cryptography or private and public kid 

354
00:15:40,920 --> 00:15:41,300
Yes

355
00:15:41,300 --> 00:15:42,100
 hash functions 

356
00:15:42,100 --> 00:15:42,340
Yes

357
00:15:42,340 --> 00:15:43,360
 private public kid 

358
00:15:43,430 --> 00:15:48,780
And the other kind of key design features or or words you didn't understand 

359
00:15:48,780 --> 00:15:50,030
Maybe that's another way to put it 

360
00:15:51,140 --> 00:15:55,040
Liam drove the dresses with a address of the three point addresses 

361
00:15:55,050 --> 00:15:55,700
3

362
00:15:58,300 --> 00:16:00,570
 That's four of the things this is going well 

363
00:16:01,420 --> 00:16:02,970
Rehab the payments 

364
00:16:04,010 --> 00:16:05,200
So payment is

365
00:16:05,210 --> 00:16:08,950
 is something that is trying to address 

366
00:16:08,960 --> 00:16:10,700
It's not really a design feature

367
00:16:10,700 --> 00:16:11,330
 but it's a

368
00:16:11,340 --> 00:16:13,250
 they have a solution for double payments 

369
00:16:13,510 --> 00:16:14,540
I'll give you a credit for it 

370
00:16:14,550 --> 00:16:15,110
But it's

371
00:16:17,270 --> 00:16:18,017
 all right 

372
00:16:18,017 --> 00:16:19,263
So Hugo says miners

373
00:16:19,263 --> 00:16:21,506
 which is really the consensus 

374
00:16:21,506 --> 00:16:22,005
So I'll

375
00:16:22,005 --> 00:16:26,490
 I'll say that the design feature is the consensus or proof of work 

376
00:16:26,490 --> 00:16:26,989
Kelly

377
00:16:26,989 --> 00:16:29,481
 the full number of verses of light 

378
00:16:29,481 --> 00:16:29,980
So you

379
00:16:30,670 --> 00:16:30,940
 right 

380
00:16:30,940 --> 00:16:31,890
So very interesting 

381
00:16:31,890 --> 00:16:38,450
This concept of nodes and Satoshi actually talks about full nodes or lightweight nodes 

382
00:16:38,450 --> 00:16:38,910
In essence

383
00:16:38,910 --> 00:16:41,860
 how much information has to be stored 

384
00:16:41,870 --> 00:16:42,940
I want to reserve that 

385
00:16:42,940 --> 00:16:43,270
Kelly

386
00:16:43,270 --> 00:16:46,970
 Please remind me when we talk about blockheaded us to come back to that 

387
00:16:46,980 --> 00:16:52,000
But nodes and the network is a very important design feature over here 

388
00:16:52,570 --> 00:16:57,340
Restructure the Merkel tree structure 

389
00:16:57,430 --> 00:17:04,146
So Merkel tree structure is a way to compress a lot of data and the and also to sort through that data 

390
00:17:04,146 --> 00:17:04,392
Oh

391
00:17:04,392 --> 00:17:04,637
 oh

392
00:17:04,637 --> 00:17:04,883
 no

393
00:17:04,883 --> 00:17:05,129
 no 

394
00:17:05,129 --> 00:17:08,079
Supreme is not going to clean me down here 

395
00:17:08,079 --> 00:17:10,291
Merkel tree structure is there 

396
00:17:10,291 --> 00:17:12,257
We're gonna talk about that 

397
00:17:12,257 --> 00:17:13,732
Two more like the notes 

398
00:17:13,732 --> 00:17:14,469
What's that 

399
00:17:14,469 --> 00:17:15,207
The notes 

400
00:17:15,207 --> 00:17:16,436
What are the notes 

401
00:17:16,436 --> 00:17:17,173
All right 

402
00:17:17,173 --> 00:17:17,910
What's that 

403
00:17:17,910 --> 00:17:18,402
Knots

404
00:17:18,402 --> 00:17:18,894
 knots 

405
00:17:18,894 --> 00:17:19,631
The knots 

406
00:17:19,631 --> 00:17:19,877
Okay

407
00:17:19,877 --> 00:17:20,860
 so a knots 

408
00:17:20,860 --> 00:17:23,072
Anybody know what the word nonsense 

409
00:17:23,072 --> 00:17:23,810
A year ago 

410
00:17:24,830 --> 00:17:25,310
This is it 

411
00:17:25,340 --> 00:17:26,500
So we're all getting there 

412
00:17:29,390 --> 00:17:29,550
Look

413
00:17:30,200 --> 00:17:31,210
 do I have a look 

414
00:17:31,220 --> 00:17:32,020
Do you know what a nonsense 

415
00:17:34,340 --> 00:17:35,959
In the actual protocol

416
00:17:35,959 --> 00:17:38,590
 it's essentially a guess for the miners to 

417
00:17:39,180 --> 00:17:44,950
So the word not means a random number that is used once and for a number 

418
00:17:46,800 --> 00:17:50,320
And once it's a number that's random 

419
00:17:50,340 --> 00:17:51,460
And it's used once 

420
00:17:53,280 --> 00:17:54,800
But that's how I've learned it 

421
00:17:57,450 --> 00:18:00,370
And so one more because it's sort of this is great 

422
00:18:01,790 --> 00:18:04,416
Remind me of your first name

423
00:18:04,416 --> 00:18:04,745
 Crea

424
00:18:04,745 --> 00:18:05,730
 Crea peer here 

425
00:18:06,410 --> 00:18:06,840
All right

426
00:18:06,850 --> 00:18:07,540
 so how 

427
00:18:07,550 --> 00:18:10,240
This is what I have cryptographic hash functions 

428
00:18:10,250 --> 00:18:18,460
And we're going to go through these in more detail times stamped append only logs the block headers and Merkel trees 

429
00:18:18,470 --> 00:18:20,010
Some Merkel trees were discussed

430
00:18:20,020 --> 00:18:21,550
 but we need to actually say what

431
00:18:21,550 --> 00:18:31,590
 what information is kept at the head of the block as opposed to all the but the body and some of that's just to make it more manageable 

432
00:18:32,120 --> 00:18:33,720
A symmetric cryptography

433
00:18:33,720 --> 00:18:34,970
 which is this public key

434
00:18:34,980 --> 00:18:36,570
 private key and signature

435
00:18:38,130 --> 00:18:40,250
 the Bitcoin addresses themselves

436
00:18:40,970 --> 00:18:42,410
 which interestingly

437
00:18:42,410 --> 00:18:44,720
 are a little bit different than public keys 

438
00:18:45,090 --> 00:18:51,314
And then I breach break because the next we're going to talk about next Tuesday

439
00:18:51,314 --> 00:18:52,667
 the proof of work

440
00:18:52,667 --> 00:18:53,478
 the miners

441
00:18:53,478 --> 00:18:54,832
 the nodes

442
00:18:55,102 --> 00:18:57,267
 the nonsense are all in that 

443
00:18:57,538 --> 00:18:58,350
Little topic 

444
00:18:59,440 --> 00:19:01,130
There's actually in Bitcoin 

445
00:19:01,330 --> 00:19:06,340
A really important protocol is how information gets propagated on the internet

446
00:19:06,350 --> 00:19:08,290
 Just the network communication 

447
00:19:08,430 --> 00:19:09,700
It's not written about a lot 

448
00:19:09,800 --> 00:19:12,350
You won't read a lot about it in the thamiel poppers

449
00:19:12,360 --> 00:19:15,120
 digital gold or all the other popular books

450
00:19:15,200 --> 00:19:25,290
 but it is an important thing to remind ourselves that information has to propagate around the Internet and all these transactions have to communicate with each other 

451
00:19:25,300 --> 00:19:30,390
There's currently about 10000 nodes on the Bitcoin network 

452
00:19:30,400 --> 00:19:32,290
We don't know where all the all of them are

453
00:19:32,290 --> 00:19:34,980
 but they're probably in 180 different countries 

454
00:19:35,460 --> 00:19:40,070
And so it just also the networking and communication matters 

455
00:19:40,430 --> 00:19:42,820
And it matters to the economics a lot 

456
00:19:44,060 --> 00:19:45,360
There's a native currency 

457
00:19:45,360 --> 00:19:46,630
And this is interesting 

458
00:19:46,630 --> 00:19:52,770
That was the one thing that no one said that's in the actual technological design feature 

459
00:19:52,780 --> 00:19:55,630
It's not only that he created a currency

460
00:19:55,730 --> 00:19:59,720
 but the native currency is part of the economic incentive system for 

461
00:20:00,520 --> 00:20:03,210
And we'll have some fun with that 

462
00:20:03,250 --> 00:20:03,790
In essence

463
00:20:03,790 --> 00:20:12,640
 he said that when you mind and did the proof of work you created and you got some native currency called Bitcoin 

464
00:20:12,650 --> 00:20:15,320
So he created an economic incentive system

465
00:20:15,770 --> 00:20:21,690
 whomever Satoshi Nakamoto was or is knew a lot about economics as well as technology 

466
00:20:21,700 --> 00:20:22,180
Yes

467
00:20:22,190 --> 00:20:24,160
 I just wanted to quickly add to what you said 

468
00:20:24,160 --> 00:20:26,820
So it's not only that you create this native currency

469
00:20:26,820 --> 00:20:28,950
 but once the finite supplies reach

470
00:20:28,990 --> 00:20:31,900
 the currency can be distributed as a transaction fee

471
00:20:32,280 --> 00:20:34,750
 which I think is a very important and intense rise 

472
00:20:34,750 --> 00:20:35,970
And remind me your first name

473
00:20:35,970 --> 00:20:36,210
 Daniel 

474
00:20:36,530 --> 00:20:38,220
So what Daniel just said is

475
00:20:38,230 --> 00:20:39,870
 is really interesting

476
00:20:39,870 --> 00:20:45,050
 not only to take light of this individual individuals that did this

477
00:20:45,380 --> 00:20:56,830
 but this world of Bitcoin and other cryptocurrencies creates a unit of of account that could be valued 

478
00:20:56,830 --> 00:20:57,940
And once it's valued

479
00:20:57,940 --> 00:21:00,340
 you have sort of a native currency 

480
00:21:00,380 --> 00:21:01,960
But as Daniel said

481
00:21:01,980 --> 00:21:03,120
 Nakamoto also said

482
00:21:03,120 --> 00:21:04,760
 there would be a finite limit 

483
00:21:06,130 --> 00:21:08,320
It happens to be 21 million 

484
00:21:08,360 --> 00:21:09,870
Bitcoin is the most 

485
00:21:10,160 --> 00:21:10,600
It can be

486
00:21:11,200 --> 00:21:14,130
 And we'll get there around the year 2040 

487
00:21:14,950 --> 00:21:16,460
Does anyone know how many Bitcoin they were 

488
00:21:16,460 --> 00:21:17,350
Right now 

489
00:21:17,720 --> 00:21:19,060
About half of you were reinvesting 

490
00:21:19,170 --> 00:21:24,110
And that's what I was kind of curious you go about 17 million Bitcoin right now

491
00:21:25,300 --> 00:21:31,110
 and all 17 million have come from this process of proof of work and mining 

492
00:21:31,160 --> 00:21:31,690
Initially

493
00:21:31,690 --> 00:21:34,840
 it was 50 Bitcoin every 10 minutes

494
00:21:35,040 --> 00:21:36,870
 roughly every 10 minutes 

495
00:21:36,880 --> 00:21:37,110
Then

496
00:21:37,770 --> 00:21:39,450
 it went down to 25 

497
00:21:39,460 --> 00:21:40,900
And we are now at 12

498
00:21:40,910 --> 00:21:41,760
5 Bitcoin 

499
00:21:42,150 --> 00:21:45,550
And does anyone know what today's value purported 

500
00:21:45,550 --> 00:21:46,300
I always should say

501
00:21:46,310 --> 00:21:52,040
 purported value of Bitcoin cuz I don't know if we can trust some of those websites that say what the values are

502
00:21:53,280 --> 00:21:53,650
 what

503
00:21:53,650 --> 00:21:54,020
 what is it 

504
00:21:54,670 --> 00:21:57,310
So $6500 a Bitcoin

505
00:21:57,420 --> 00:21:58,380
 a 12

506
00:21:58,390 --> 00:22:00,590
5 Bitcoin to mine a block 

507
00:22:02,640 --> 00:22:03,620
So you

508
00:22:03,620 --> 00:22:12,260
 so you see that it's about $80000 is the reward to mine a block

509
00:22:12,300 --> 00:22:12,730
 right 

510
00:22:12,730 --> 00:22:12,810
So

511
00:22:13,340 --> 00:22:16,890
 so there he created an incentive system that initially

512
00:22:16,890 --> 00:22:20,190
 if you got 50 Bitcoin and they weren't worth a penny

513
00:22:20,850 --> 00:22:23,500
 you would not commit that much 

514
00:22:24,060 --> 00:22:24,400
You had

515
00:22:24,410 --> 00:22:35,160
 you had to be a hobbyist basically in 29 or a cyber punk or just kind of curious because you weren't getting much incentive if in fact

516
00:22:35,170 --> 00:22:36,760
 it's worth 6500 a day

517
00:22:36,760 --> 00:22:38,770
 you're getting $80000 

518
00:22:39,570 --> 00:22:42,570
If you actually successfully mine a block

519
00:22:43,690 --> 00:22:46,350
 and then there's the transaction inputs and outputs 

520
00:22:46,350 --> 00:22:46,820
Think about

521
00:22:47,230 --> 00:22:48,100
 a check 

522
00:22:48,870 --> 00:22:51,200
You know who signs it where you move 

523
00:22:53,210 --> 00:22:55,860
There's something called the unspent transaction ledger 

524
00:22:55,860 --> 00:22:57,550
So this is the ledger part 

525
00:22:57,740 --> 00:23:00,530
So when you think I think of the technology

526
00:23:00,570 --> 00:23:02,160
 I think of cryptography

527
00:23:02,170 --> 00:23:04,560
 which is kind of all that stuff at the top

528
00:23:04,570 --> 00:23:06,170
 which we're going to discuss today 

529
00:23:06,960 --> 00:23:07,710
Secondly

530
00:23:07,710 --> 00:23:09,500
 the consensus mechanism

531
00:23:09,510 --> 00:23:10,070
 in essence

532
00:23:10,070 --> 00:23:13,040
 that's that key question of any database 

533
00:23:13,280 --> 00:23:15,590
Who gets to amend the database 

534
00:23:15,600 --> 00:23:22,140
Who gets to decide to change the state of what we all agreed to 

535
00:23:23,100 --> 00:23:23,690
And then

536
00:23:23,700 --> 00:23:24,420
 thirdly

537
00:23:24,440 --> 00:23:26,900
 is the ledger or the transaction ledger

538
00:23:26,900 --> 00:23:30,130
 which we're not going to deep dive into the scripting language 

539
00:23:30,130 --> 00:23:35,000
But we are next Thursday Going to talk a little bit about the underlying scripting 

540
00:23:35,010 --> 00:23:36,250
So does that give you a payoff 

541
00:23:36,260 --> 00:23:40,920
It's all this cryptography the consensus

542
00:23:40,940 --> 00:23:42,180
 and then the transactions 

543
00:23:42,190 --> 00:23:42,620
Yes

544
00:23:42,630 --> 00:23:45,640
 I don't understand if you're going to use this person 

545
00:23:45,660 --> 00:23:45,770
Oh

546
00:23:45,870 --> 00:23:46,970
 you can just curious 

547
00:23:47,280 --> 00:23:49,230
So you mentioned that is a very special day

548
00:23:49,860 --> 00:23:52,195
 Alright

549
00:23:52,195 --> 00:23:52,591
 alright 

550
00:23:52,591 --> 00:23:53,581
So just curiosity 

551
00:23:53,581 --> 00:23:54,768
You mentioned that the

552
00:23:54,966 --> 00:23:59,321
 per block value is roughly $80000 as of as of now 

553
00:23:59,321 --> 00:24:00,113
So just curious 

554
00:24:00,311 --> 00:24:02,290
In terms of the CPU power

555
00:24:02,290 --> 00:24:05,655
 the electricity that will be consumed to Minecraft 

556
00:24:05,655 --> 00:24:09,020
How much does that translate into equivalent in US dollar terms 

557
00:24:10,060 --> 00:24:12,960
So the question that's asked is how much

558
00:24:13,440 --> 00:24:20,170
 electricity is being consumed for that minor to get that reward

559
00:24:20,170 --> 00:24:21,740
 that $80000 

560
00:24:21,750 --> 00:24:25,110
And I'm going to try to answer in one minute 

561
00:24:25,120 --> 00:24:30,160
But we'll come back to this later in the semester about the economics and blockchain

562
00:24:30,160 --> 00:24:32,120
 economics and mining economics 

563
00:24:32,120 --> 00:24:44,550
But what has happened over these 10 years is more and more computers that are being used are are trying to mine for the Bitcoin 

564
00:24:45,020 --> 00:24:45,930
And so today

565
00:24:46,980 --> 00:24:53,190
 in the most recent research I have seen is that the probability of winning a block 

566
00:24:53,220 --> 00:24:57,320
There's so much is it measured in terror hashes 

567
00:24:57,320 --> 00:24:59,440
I can't remember the numbers

568
00:24:59,440 --> 00:25:03,870
 but it's how many times Tara hashes

569
00:25:03,870 --> 00:25:04,570
 which is

570
00:25:04,580 --> 00:25:04,900
 is it 

571
00:25:04,900 --> 00:25:06,060
15 zeros 

572
00:25:06,070 --> 00:25:07,380
Is it Tara hash 

573
00:25:07,390 --> 00:25:08,880
Is it trackers at 12 

574
00:25:09,630 --> 00:25:10,040
You know

575
00:25:10,050 --> 00:25:10,460
 Well

576
00:25:10,460 --> 00:25:11,330
 in an event

577
00:25:11,340 --> 00:25:12,970
 there's so many hashes being done 

578
00:25:12,980 --> 00:25:19,040
A second X number of terror hashes that your probability of winning is quite low 

579
00:25:19,060 --> 00:25:26,370
And so what's happened is most nodes and miners have entered into agreements called mining pools

580
00:25:26,380 --> 00:25:28,370
 where they smooth out the risk 

581
00:25:28,380 --> 00:25:30,680
And everybody shares in the rewards 

582
00:25:31,030 --> 00:25:33,510
But those economics will talk about later 

583
00:25:33,520 --> 00:25:40,640
It's thought to be that you need electricity cost around 3 cents a kilowatt hour to be successful 

584
00:25:40,820 --> 00:25:42,250
And in most parts of the world

585
00:25:42,250 --> 00:25:46,000
 you can't get electricity for 3 cents a kilowatt hour 

586
00:25:46,020 --> 00:25:54,980
So you would put your mining rigs where you can get low cost electricity or a where you possibly can 

587
00:25:55,390 --> 00:25:59,200
You could get it legally low cost or illegally low cost 

588
00:25:59,210 --> 00:26:00,230
So there

589
00:26:00,230 --> 00:26:10,060
 there are a lot of mining rigs and in jurisdictions where there may be local officials that are allowing those mining rigs and instead of 3 cents a kilowatt hour to the electric company

590
00:26:10,060 --> 00:26:13,910
 it's 1 to 2 cents a kilowatt hour to the local government officials 

591
00:26:14,880 --> 00:26:15,700
So

592
00:26:15,780 --> 00:26:18,780
 and the two largest mining pools are in China 

593
00:26:18,780 --> 00:26:20,790
And the third is in Russia 

594
00:26:21,640 --> 00:26:24,230
But we'll get into the sort of the economics 

595
00:26:24,230 --> 00:26:31,850
And at least some theories about why summer where they are so cryptography 

596
00:26:33,220 --> 00:26:35,230
So eileen's probably going to clean me up 

597
00:26:35,240 --> 00:26:38,310
It's not just communication in the presence of an adverse series 

598
00:26:38,310 --> 00:26:43,550
It's also computation in the presence of adverse series is that that would be good 

599
00:26:44,150 --> 00:26:45,140
And we talked about

600
00:26:45,430 --> 00:26:46,180
 we're not going to deep

601
00:26:46,190 --> 00:26:47,200
 deep dive

602
00:26:47,210 --> 00:26:48,370
 if you remember

603
00:26:48,380 --> 00:26:49,850
 even in ancient times

604
00:26:49,850 --> 00:26:51,310
 if you were going to war

605
00:26:51,380 --> 00:26:54,880
 there was this wonderful little way that you could do cryptography 

606
00:26:54,920 --> 00:26:57,610
And then anybody who's seen imit

607
00:26:58,010 --> 00:27:00,013
 imit imitation games 

608
00:27:00,013 --> 00:27:00,240
Yeah

609
00:27:00,920 --> 00:27:02,280
 about the British

610
00:27:02,280 --> 00:27:02,734
 you know

611
00:27:02,734 --> 00:27:04,774
 breaking into the German codes

612
00:27:04,774 --> 00:27:13,616
 even though they should have probably given more credit to the Polish government that had probably broken into it in the 1930s

613
00:27:13,616 --> 00:27:15,430
 but touring did a great work 

614
00:27:16,010 --> 00:27:18,820
And then we're gonna talk about asymmetric cryptography 

615
00:27:20,340 --> 00:27:20,700
Okay

616
00:27:20,710 --> 00:27:22,280
 what is a hash function 

617
00:27:23,680 --> 00:27:25,020
A hash function 

618
00:27:25,020 --> 00:27:28,030
And that these are just words that I think of it 

619
00:27:28,040 --> 00:27:30,400
I think of it as a fingerprint for data 

620
00:27:32,790 --> 00:27:34,720
But it has certain properties

621
00:27:35,400 --> 00:27:40,640
 the one that you'll see throughout is that it takes inputs of input x

622
00:27:41,210 --> 00:27:45,470
 it maps that input of any size to a fixed size 

623
00:27:45,910 --> 00:27:47,990
So one that we use here in the us

624
00:27:47,990 --> 00:27:48,890
 one hash function

625
00:27:48,890 --> 00:27:50,530
 we all uses zip codes in a way

626
00:27:51,690 --> 00:27:52,337
 5 digits 

627
00:27:52,337 --> 00:27:53,417
It's a fixed size 

628
00:27:53,417 --> 00:27:56,009
I know i'm doing this as a loose hand 

629
00:27:56,009 --> 00:27:56,441
You know 

630
00:27:56,441 --> 00:27:57,952
How can I think of it 

631
00:27:57,952 --> 00:28:05,970
But zip codes you might have 50000 people or 5000 people all living in one in one postal district

632
00:28:05,980 --> 00:28:07,990
 and you can map them to zip codes 

633
00:28:07,990 --> 00:28:09,840
And it's a to fixed Led 

634
00:28:10,770 --> 00:28:11,100
Now

635
00:28:11,110 --> 00:28:14,560
 I don't know whether my friends in the computer science departments

636
00:28:14,560 --> 00:28:15,080
 but

637
00:28:15,150 --> 00:28:18,090
 but it's an early sense of a hash function 

638
00:28:18,110 --> 00:28:19,830
I just wanted to say there are

639
00:28:20,330 --> 00:28:29,250
 there are tangible things in our life that act like hash functions problem with zip codes is it will not in any way be a secure hash function 

640
00:28:29,260 --> 00:28:31,080
And you'll see that in a minute 

641
00:28:31,090 --> 00:28:32,030
But it does take

642
00:28:32,730 --> 00:28:39,140
 you can be a £300 person or a £30 kid

643
00:28:39,400 --> 00:28:42,640
 and you still map into the same zip code 

644
00:28:45,220 --> 00:28:46,510
It's deterministic 

645
00:28:46,520 --> 00:28:47,850
It's always the same 

646
00:28:47,850 --> 00:28:49,820
So if you take a certain set of data

647
00:28:50,670 --> 00:28:56,900
 it will always give you the same hash and that's relevant to the background 

648
00:28:58,070 --> 00:28:59,630
And you can efficiently compute it 

649
00:28:59,640 --> 00:29:01,360
You don't want to take a year to do this 

650
00:29:01,360 --> 00:29:04,110
You've got to do it in short periods of time 

651
00:29:04,120 --> 00:29:05,570
And in Bitcoin's case

652
00:29:05,580 --> 00:29:19,530
 it's done in nanoseconds or less because there one computer 1 CPU can do can't remember probably how many millions a second couple of terror hashes a second 

653
00:29:19,980 --> 00:29:22,750
A couple of terror house hashes a second 

654
00:29:23,300 --> 00:29:27,010
So it's a remarkably efficient algorithm 

655
00:29:27,930 --> 00:29:33,880
And so a bunch of mathematicians and hashing started in the 1950 S and 60 S

656
00:29:33,880 --> 00:29:37,030
 But the ones that we're talking about here are much more recent 

657
00:29:37,040 --> 00:29:41,490
But it's really terrifically talented scientists

658
00:29:41,500 --> 00:29:47,600
 mathematicians computer scientists and sometimes the national institute standards of technology here in the us

659
00:29:47,650 --> 00:29:49,150
 working on hash functions 

660
00:29:49,780 --> 00:29:52,800
So it takes an array of any size

661
00:29:52,920 --> 00:29:54,420
 puts it into a fixed number 

662
00:29:54,430 --> 00:29:56,130
I think zip codes for a minute 

663
00:29:57,420 --> 00:29:58,530
It's deterministic 

664
00:29:58,530 --> 00:30:01,490
It's always you only live in 1 zip code

665
00:30:01,500 --> 00:30:02,530
 in a sense 

666
00:30:02,540 --> 00:30:04,010
And it's very efficient 

667
00:30:04,270 --> 00:30:09,680
But now what are the cryptographic properties because a zip code wouldn't make it just wouldn't 

668
00:30:11,140 --> 00:30:12,070
Well

669
00:30:12,170 --> 00:30:15,170
 the computer scientist uses term preimage resistant 

670
00:30:15,510 --> 00:30:17,570
I would just say it's one way out 

671
00:30:18,580 --> 00:30:19,710
You can only go one way

672
00:30:19,720 --> 00:30:21,930
 meaning it's infeasible 

673
00:30:22,040 --> 00:30:26,360
And to determine the input from the output

674
00:30:26,700 --> 00:30:30,830
 it's infeasible to determine the ax from the hash of x 

675
00:30:32,850 --> 00:30:36,960
Does anybody know why I use the word infeasible rather than impossible 

676
00:30:38,030 --> 00:30:40,510
It will be in the first name is very different 

677
00:30:42,040 --> 00:30:43,490
So because you can do it with blue posts 

678
00:30:44,170 --> 00:30:45,470
So you might be able to use it 

679
00:30:45,490 --> 00:30:46,160
Brute force 

680
00:30:46,170 --> 00:30:47,180
What do you mean by brute force 

681
00:30:47,180 --> 00:30:50,310
Just so everybody try all options and try all options and 

682
00:30:53,390 --> 00:30:55,060
But as I understand it

683
00:30:55,070 --> 00:31:03,190
 a sort of tentative cryptography for centuries is not to have it mathematically impossible 

684
00:31:03,200 --> 00:31:11,750
It's the point is getting it so and infeasible that your adversary is can't either get the communication or so forth 

685
00:31:12,130 --> 00:31:13,690
So hash functions

686
00:31:13,750 --> 00:31:17,910
 I just say this because you can't assume that Bitcoin can't be broken 

687
00:31:17,910 --> 00:31:19,250
We all call it immutable 

688
00:31:19,250 --> 00:31:27,150
It is immutable until the hash functions that are inside of Bitcoin might be broken 

689
00:31:27,160 --> 00:31:30,030
And even Satoshi wrote about this in 2010 

690
00:31:30,030 --> 00:31:30,980
He got emails 

691
00:31:30,980 --> 00:31:32,500
There's this wonderful book 

692
00:31:32,500 --> 00:31:36,990
If any of you want that I mentioned in the bookshelf at the end of the syllabus said

693
00:31:36,990 --> 00:31:37,110
 well

694
00:31:37,110 --> 00:31:39,750
 what if a Shaw 2 56 

695
00:31:39,750 --> 00:31:42,260
Which is the hash function gets broken 

696
00:31:42,530 --> 00:31:44,680
And his answer was

697
00:31:44,690 --> 00:31:45,640
 was

698
00:31:45,700 --> 00:31:45,990
 well

699
00:31:45,990 --> 00:31:49,030
 there will be a better hash function at that time 

700
00:31:49,040 --> 00:31:50,370
Whatever that is

701
00:31:51,520 --> 00:31:54,350
 will hash the entire system

702
00:31:54,350 --> 00:31:55,340
 whatever that is 

703
00:31:55,340 --> 00:31:55,930
Because remember

704
00:31:55,930 --> 00:31:58,050
 you can take something of any size

705
00:31:58,070 --> 00:32:00,330
 hash it with the new system and move forward 

706
00:32:00,340 --> 00:32:17,190
And so he felt he or she felt in this wonderful email is that Bitcoin actually could transition to a new hash function as long as you had a little bit of time before it was all corrupted 

707
00:32:17,980 --> 00:32:18,200
Okay

708
00:32:18,230 --> 00:32:22,850
 so this one is our code called the gamer problem 

709
00:32:22,860 --> 00:32:23,890
Is that what you're describing 

710
00:32:24,840 --> 00:32:26,280
The gamblers ruin problem

711
00:32:26,980 --> 00:32:31,410
 the probability that an attacker could catch up to like recreating it 

712
00:32:34,020 --> 00:32:34,234
No

713
00:32:34,234 --> 00:32:34,448
 no

714
00:32:34,448 --> 00:32:35,732
 that's something else 

715
00:32:35,732 --> 00:32:36,160
That's

716
00:32:36,670 --> 00:32:38,630
 that's a really sweet one in the matter 

717
00:32:38,630 --> 00:32:38,793
Yeah

718
00:32:38,793 --> 00:32:39,610
 so that's the

719
00:32:40,010 --> 00:32:41,318
 if I can call correctly

720
00:32:41,318 --> 00:32:41,692
 you know

721
00:32:41,692 --> 00:32:44,309
 you wanna sort of assess how hard it is at the 4th

722
00:32:44,309 --> 00:32:44,682
 5th coin 

723
00:32:44,682 --> 00:32:46,925
If I have a lot of computational power

724
00:32:46,925 --> 00:32:48,981
 how hard is it for me to create a fork 

725
00:32:48,981 --> 00:32:52,159
And so those she doesn't analysis at the end of the paper 

726
00:32:52,159 --> 00:32:52,346
Oh

727
00:32:52,346 --> 00:32:52,533
 oh

728
00:32:52,533 --> 00:32:52,720
 oh

729
00:32:52,720 --> 00:32:53,467
 I apologize 

730
00:32:53,467 --> 00:32:55,150
You're talking about in his paper 

731
00:32:55,440 --> 00:32:55,840
Yes

732
00:32:55,850 --> 00:32:56,820
 in his paper

733
00:32:56,820 --> 00:33:05,410
 he's talking about how hard it is computationally to do what some people call a 51% attack to basically take over all the nodes 

734
00:33:05,490 --> 00:33:06,710
And that part of his paper

735
00:33:06,710 --> 00:33:08,500
 we're going to talk about next Tuesday 

736
00:33:08,500 --> 00:33:09,480
But it's basically

737
00:33:09,490 --> 00:33:11,220
 can you take over the nodes 

738
00:33:12,010 --> 00:33:13,550
I was talking about a separate thing 

739
00:33:13,550 --> 00:33:15,420
Can you break the cryptography 

740
00:33:15,550 --> 00:33:17,420
And he doesn't write about that In his paper 

741
00:33:17,420 --> 00:33:21,340
He writes about it in an email about 10 months later or so 

742
00:33:22,510 --> 00:33:24,850
Second key cryptographic thing 

743
00:33:24,850 --> 00:33:32,110
So we said one is it's one way the other thing is this concept of collision resistant 

744
00:33:33,050 --> 00:33:36,910
I presume if everybody in this room told me that your birthdays

745
00:33:36,930 --> 00:33:40,110
 there's multiple people in this room who have the same birthday 

746
00:33:41,230 --> 00:33:41,910
And in fact

747
00:33:41,910 --> 00:33:42,960
 if we got it passed

748
00:33:42,960 --> 00:33:44,410
 26 people in a room

749
00:33:44,410 --> 00:33:48,650
 it's over 50% chats that two of you have the same birthday 

750
00:33:48,650 --> 00:33:52,190
We don't need to get to 183 people in the room

751
00:33:52,860 --> 00:33:54,850
 which is half of the days of the year 

752
00:33:54,850 --> 00:33:57,130
We can get to about 26 or 7 

753
00:33:57,260 --> 00:33:58,320
And

754
00:34:01,120 --> 00:34:02,210
 similarly

755
00:34:02,210 --> 00:34:03,460
 the key thing is

756
00:34:03,460 --> 00:34:07,530
 is that two sets of data are

757
00:34:07,540 --> 00:34:11,600
 it's again infeasible that x and Y would hash to the same thing 

758
00:34:11,890 --> 00:34:13,200
It's not impossible 

759
00:34:13,310 --> 00:34:14,350
It is infeasible 

760
00:34:14,360 --> 00:34:17,500
And if you look at the history of hash functions

761
00:34:17,520 --> 00:34:20,890
 this is usually the thing that at some point in time

762
00:34:20,900 --> 00:34:23,410
 these hash functions will not be collision resistant 

763
00:34:23,410 --> 00:34:27,020
Some quantum computing will come along or something will come along 

764
00:34:27,260 --> 00:34:28,830
But for now

765
00:34:28,910 --> 00:34:30,970
 you can put something of any size in

766
00:34:30,980 --> 00:34:33,480
 and they're independent 

767
00:34:36,210 --> 00:34:38,020
They also look terribly random 

768
00:34:38,020 --> 00:34:39,930
It's called an avalanche effect

769
00:34:41,220 --> 00:34:44,350
 meaning you change one little difference 

770
00:34:44,360 --> 00:34:45,860
And the whole thing looks different 

771
00:34:45,870 --> 00:34:47,730
So when you noticed on that little video

772
00:34:47,730 --> 00:34:49,610
 if you changed one thing

773
00:34:49,630 --> 00:34:51,010
 it all looks so different 

774
00:34:51,620 --> 00:34:54,300
And why that's important is it makes it more secure 

775
00:34:56,030 --> 00:34:58,060
And then there's something called puzzle friendliness

776
00:34:58,340 --> 00:35:00,130
 even if you know a little bit of the input

777
00:35:00,130 --> 00:35:02,320
 it doesn't mean that you're going to get the output 

778
00:35:03,270 --> 00:35:04,320
I put these up here

779
00:35:04,320 --> 00:35:05,580
 not for you to know them 

780
00:35:06,060 --> 00:35:11,130
You're not going to get tested if you go into business as a law 

781
00:35:11,130 --> 00:35:12,920
And you've started when you probably haven't thought

782
00:35:12,920 --> 00:35:13,430
 well

783
00:35:13,620 --> 00:35:14,000
 you know

784
00:35:14,010 --> 00:35:16,270
 collision resistant this or that

785
00:35:16,300 --> 00:35:20,560
 But I just wanted you to know there are always a bunch of cryptography underneath 

786
00:35:21,710 --> 00:35:22,560
And

787
00:35:24,730 --> 00:35:26,440
 the keys

788
00:35:27,440 --> 00:35:31,400
 It is not 100 percent immutable 

789
00:35:31,460 --> 00:35:35,380
It's like probably one 

790
00:35:35,380 --> 00:35:35,890
And

791
00:35:37,090 --> 00:35:37,740
 you know

792
00:35:37,880 --> 00:35:38,220
 I don't know

793
00:35:38,510 --> 00:35:40,060
 1 quadrillion immutable

794
00:35:40,130 --> 00:35:42,400
 but there's still these things could be broken 

795
00:35:42,860 --> 00:35:46,330
And quantum computing and something else might Elaine

796
00:35:46,720 --> 00:35:50,230
 the actual probability should be actually one over two to the power of one 28th 

797
00:35:52,440 --> 00:35:53,870
It's much more than 1 quadrillion 

798
00:35:54,860 --> 00:35:55,181
So

799
00:35:55,181 --> 00:35:58,720
 so it's 1 over 10 to about the 40th 

800
00:36:01,900 --> 00:36:04,350
How did I do my math 

801
00:36:04,350 --> 00:36:04,700
All right

802
00:36:05,880 --> 00:36:06,330
 alright

803
00:36:09,300 --> 00:36:12,600
 and anybody who is interested can come to office hours 

804
00:36:12,630 --> 00:36:12,690
Well

805
00:36:14,710 --> 00:36:17,880
 so it's highly unlikely to be broke in

806
00:36:18,380 --> 00:36:20,730
 but I think it's always worth while to say

807
00:36:20,730 --> 00:36:20,880
 well

808
00:36:20,880 --> 00:36:21,050
 no

809
00:36:21,050 --> 00:36:22,250
 there there is some outward 

810
00:36:22,550 --> 00:36:24,530
It's not as bounded as you think 

811
00:36:26,000 --> 00:36:27,470
So what 

812
00:36:27,470 --> 00:36:29,570
What is it used for in many places 

813
00:36:29,570 --> 00:36:32,610
It's used for names and references and pointers

814
00:36:32,610 --> 00:36:36,020
 and something called commitments in Bitcoin 

815
00:36:36,020 --> 00:36:40,410
It's used for pointers because one block points to another block 

816
00:36:41,310 --> 00:36:44,450
But it's also used in commitments 

817
00:36:46,120 --> 00:36:47,860
You'll hear these words 

818
00:36:47,870 --> 00:36:49,660
We're not going to delve into them

819
00:36:49,670 --> 00:36:54,850
 but the headers and the Merkel trees use something called Shaw 2 56

820
00:36:54,850 --> 00:36:56,370
 which is a standard

821
00:36:56,470 --> 00:37:01,450
 which is literally 256 b long 

822
00:37:02,680 --> 00:37:07,590
That's like zeroes and ones for 256 registries 

823
00:37:08,810 --> 00:37:09,960
But a Bitcoin address

824
00:37:09,960 --> 00:37:10,840
 actually 

825
00:37:11,420 --> 00:37:14,640
So Satoshi Nakamoto threw in a loop 

826
00:37:15,170 --> 00:37:16,780
I'm glad to debate why

827
00:37:16,790 --> 00:37:21,770
 But he uses two hash functions for Bitcoin addresses 

828
00:37:21,810 --> 00:37:25,980
And the one thing I saw that he actually wrote about it is he said if one of them was broken

829
00:37:25,980 --> 00:37:28,810
 at least the other one is less likely to be broken 

830
00:37:29,310 --> 00:37:30,070
So it was

831
00:37:30,080 --> 00:37:31,320
 as I've read about it

832
00:37:31,460 --> 00:37:32,830
 I think in his own voice

833
00:37:33,920 --> 00:37:35,960
 you have to hash something twice 

834
00:37:35,970 --> 00:37:38,210
And he was just making it that much more secure

835
00:37:38,310 --> 00:37:39,500
 even though Eileen

836
00:37:39,510 --> 00:37:42,220
 there was one out of 10 to the 40th chance

837
00:37:42,920 --> 00:37:43,950
 which is astronomically low 

838
00:37:44,820 --> 00:37:44,840
So

839
00:37:44,840 --> 00:37:45,140
 right 

840
00:37:46,860 --> 00:37:47,030
So

841
00:37:47,830 --> 00:37:48,772
 so remember

842
00:37:48,772 --> 00:37:49,951
 where's Caroline 

843
00:37:49,951 --> 00:37:51,365
I don't remember 

844
00:37:51,365 --> 00:37:52,072
Here we are 

845
00:37:52,072 --> 00:37:53,486
You asked me about

846
00:37:53,486 --> 00:37:55,842
 I thought I'd set it up for today

847
00:37:55,842 --> 00:37:58,435
 but you were good to remind me for Tuesday 

848
00:37:58,435 --> 00:38:00,320
What's the longest running hash 

849
00:38:00,791 --> 00:38:01,970
A time stamp hash 

850
00:38:04,130 --> 00:38:04,690
Is a great question

851
00:38:05,680 --> 00:38:07,760
 thank you for the compliments 

852
00:38:10,320 --> 00:38:12,050
The answer is

853
00:38:12,060 --> 00:38:12,460
 yeah

854
00:38:12,490 --> 00:38:12,780
 I don't

855
00:38:12,790 --> 00:38:13,080
 I

856
00:38:14,720 --> 00:38:15,180
 we already have medically

857
00:38:15,180 --> 00:38:17,140
 so I'm not sure if I'm totally butchering this one

858
00:38:17,410 --> 00:38:19,030
 but it came out of Dell Labs 

859
00:38:19,040 --> 00:38:23,710
The Stewart paper is a shorty area is the

860
00:38:24,940 --> 00:38:25,670
 yeah

861
00:38:25,930 --> 00:38:27,530
 so Hebrew and his

862
00:38:27,530 --> 00:38:28,450
 his colleague 

863
00:38:28,540 --> 00:38:29,200
Yes

864
00:38:30,010 --> 00:38:30,460
 you got it

865
00:38:31,980 --> 00:38:32,030
 roommate 

866
00:38:32,100 --> 00:38:33,490
That's your room at terrific 

867
00:38:35,470 --> 00:38:36,430
So

868
00:38:38,270 --> 00:38:40,910
 I'm just trying to say it wasn't Bitcoin that had it 

869
00:38:40,920 --> 00:38:43,120
He did this in 1991

870
00:38:43,810 --> 00:38:45,050
 But by 1995

871
00:38:45,050 --> 00:38:46,610
 they started a company called Surety 

872
00:38:46,610 --> 00:38:48,110
I don't think it took off that much 

873
00:38:48,120 --> 00:38:52,340
It's not competing with Apple for the largest market cap or anything like that 

874
00:38:53,630 --> 00:38:54,260
Or Facebook 

875
00:38:55,900 --> 00:38:59,270
But every week in the notices section

876
00:38:59,270 --> 00:39:04,670
 you can see a hash literally that there's a

877
00:39:05,060 --> 00:39:07,490
 it's time stamped because it's in the New York Times 

878
00:39:08,970 --> 00:39:16,280
And it's a hash that all those funky digits and everything of all the information came before it 

879
00:39:16,320 --> 00:39:18,720
And they're basically hashing any document

880
00:39:19,870 --> 00:39:22,750
 any document that you want a time stamp in that week

881
00:39:22,760 --> 00:39:25,020
 you put it in one follows another

882
00:39:25,020 --> 00:39:26,500
 and that's a blockchain 

883
00:39:26,630 --> 00:39:28,240
It's not about money 

884
00:39:28,260 --> 00:39:30,300
There's no native currency

885
00:39:31,600 --> 00:39:32,260
 and so forth 

886
00:39:33,520 --> 00:39:35,718
I believe that Heber and Ster

887
00:39:35,718 --> 00:39:40,604
 Netta are three of the eight or 9 footnotes in the Satoshi paper 

888
00:39:40,604 --> 00:39:42,070
Maybe it's four of them 

889
00:39:42,950 --> 00:39:44,300
So he gets his credit 

890
00:39:45,250 --> 00:39:47,660
And if you go to his website stored Hebrew

891
00:39:47,660 --> 00:39:55,020
 I think he says a blockchain's cofounder on his personal website here now 

892
00:39:57,320 --> 00:40:00,390
So here we get this was in the National Institute

893
00:40:00,780 --> 00:40:02,190
 the NIST paper 

894
00:40:02,580 --> 00:40:06,850
But timestamp dependent only logs in Bitcoin or blockchain 

895
00:40:07,720 --> 00:40:11,620
What is put together is the header

896
00:40:11,630 --> 00:40:13,220
 the top information 

897
00:40:13,820 --> 00:40:17,950
And if I can go past the visual and just say

898
00:40:17,950 --> 00:40:18,960
 what's there 

899
00:40:19,840 --> 00:40:22,140
There's five pieces of key information

900
00:40:22,200 --> 00:40:22,880
 the version 

901
00:40:22,890 --> 00:40:24,350
It doesn't change that often

902
00:40:24,350 --> 00:40:26,170
 but there is a version number one

903
00:40:27,110 --> 00:40:29,480
 the previous blocks hash 

904
00:40:30,500 --> 00:40:35,550
So it's some information about all the blocks that came before it 

905
00:40:37,210 --> 00:40:39,460
The Merkel route hash 

906
00:40:39,470 --> 00:40:44,340
Which does anybody want to tell me what that does the Merkel route 

907
00:40:48,130 --> 00:40:48,200
Scratch

908
00:40:49,060 --> 00:40:56,470
 so it doesn't really push the transactions in the bottommost layer of the tree and then create the fee of hashtag each of the transaction 

909
00:40:57,490 --> 00:40:58,303
So if I

910
00:40:58,303 --> 00:41:00,202
 if I go back to the this

911
00:41:00,202 --> 00:41:01,830
 this nice little picture

912
00:41:03,020 --> 00:41:04,310
 the yellow boxes

913
00:41:04,310 --> 00:41:07,060
 the bottom of each of these blocks is all the transactions 

914
00:41:07,060 --> 00:41:11,310
There could be upwards to 1000 2000 transactions in a bloc 

915
00:41:11,330 --> 00:41:12,830
So this blockchain concept

916
00:41:12,830 --> 00:41:14,300
 1000 2000

917
00:41:16,020 --> 00:41:18,630
 there's means and methods well before

918
00:41:18,880 --> 00:41:22,030
 nakamoto's paper about how to compress that

919
00:41:22,030 --> 00:41:24,900
 how to keep that information a little bit tidier 

920
00:41:25,570 --> 00:41:28,040
And that uses this thing called Merkel roots 

921
00:41:28,860 --> 00:41:29,490
The thing

922
00:41:29,500 --> 00:41:32,130
 the five items right at the top

923
00:41:32,160 --> 00:41:37,850
 the what's called the block header doesn't have the thousand transactions 

924
00:41:38,290 --> 00:41:39,160
And earlier

925
00:41:39,170 --> 00:41:39,680
 Kelly

926
00:41:39,680 --> 00:41:44,040
 you had asked me about full nodes and light nodes 

927
00:41:46,100 --> 00:42:01,760
A light node or a wallet that anyone here could a download on your cell phone probably does not download the millions of transactions that have happened in the history of Bitcoin 

928
00:42:01,780 --> 00:42:05,860
You are unlikely to download what's called a full node

929
00:42:05,960 --> 00:42:08,620
 but you might download all the headers 

930
00:42:09,010 --> 00:42:10,320
This bit of information 

931
00:42:10,320 --> 00:42:11,680
That's all of the headers

932
00:42:12,750 --> 00:42:15,590
 all of the information in Bitcoin is still not that large 

933
00:42:15,590 --> 00:42:17,470
It's less than 200 gigs 

934
00:42:18,168 --> 00:42:19,917
But the all of the headers

935
00:42:19,917 --> 00:42:20,573
 I think

936
00:42:20,573 --> 00:42:21,885
 is single digit gigs 

937
00:42:21,885 --> 00:42:25,601
I can't remember if it's 4 or 6 GB right now 

938
00:42:25,601 --> 00:42:27,787
What is the number is 80 bites 

939
00:42:27,787 --> 00:42:30,848
So it's in the bytes times 500000

940
00:42:30,848 --> 00:42:32,597
 which is 50 MB

941
00:42:32,597 --> 00:42:34,565
 60 MB of feathers 

942
00:42:34,565 --> 00:42:35,876
So 60 MB 

943
00:42:35,876 --> 00:42:41,250
So it's much smaller as as opposed to like 180 gig 

944
00:42:42,680 --> 00:42:46,100
So Satoshi was thinking in advance 

945
00:42:46,570 --> 00:42:49,070
And every blockchain that you're going to work on

946
00:42:49,160 --> 00:42:49,830
 likely

947
00:42:49,840 --> 00:42:50,140
 I mean

948
00:42:50,140 --> 00:43:02,660
 there might be some that this concept of it's really keeping the security by a little bit of information in something called a header and then pushing all the meat of the transaction and data down 

949
00:43:02,800 --> 00:43:05,620
And this is really important when you get to like Ethereum

950
00:43:05,620 --> 00:43:11,380
 where there is a lot of data and a lot of computation down in each of these blocks

951
00:43:11,400 --> 00:43:13,230
 it's sort of like if stored Hebrew 

952
00:43:16,220 --> 00:43:18,880
Had a lot of documents and pictures and everything 

953
00:43:18,880 --> 00:43:19,450
He didn't 

954
00:43:19,770 --> 00:43:23,120
You don't have to have all the picture quality and a whole movie 

955
00:43:23,130 --> 00:43:28,450
You can actually hash a whole movie and you still get these 256 b 

956
00:43:28,460 --> 00:43:31,830
And so

957
00:43:32,800 --> 00:43:33,270
 oops 

958
00:43:35,220 --> 00:43:37,830
So the header has the previous hash

959
00:43:37,840 --> 00:43:38,790
 this Merkel route

960
00:43:38,790 --> 00:43:41,320
 which is just a way to get all the transactions 

961
00:43:41,330 --> 00:43:47,270
Just think of a Merkel route as a way to grab 2000 transactions in a way and a time stand 

962
00:43:47,710 --> 00:43:48,470
That one's easy 

963
00:43:48,470 --> 00:43:51,980
We can get that difficulty to target 

964
00:43:53,860 --> 00:43:55,510
Does anybody know what what 

965
00:43:57,060 --> 00:44:11,514
Blockchain Bitcoin tried to do to make it more or less difficult over time and now a broader sweep here go more to fill the retirement such that stays with you can block every 10 minutes 

966
00:44:11,514 --> 00:44:12,940
So with more computational power

967
00:44:14,520 --> 00:44:14,960
 my block 

968
00:44:15,160 --> 00:44:16,950
So as far you find a block

969
00:44:17,040 --> 00:44:19,240
 the more miners there are 

970
00:44:20,100 --> 00:44:24,870
So every block header needs to have some what's called a difficulty target 

971
00:44:25,200 --> 00:44:29,060
How difficult is the mining going to be since we're talking about mining next Tuesday 

972
00:44:30,110 --> 00:44:33,460
Please all bring me back to difficulty to target 

973
00:44:34,780 --> 00:44:37,200
And then what's a Nance 

974
00:44:40,310 --> 00:44:41,040
What's that 

975
00:44:43,630 --> 00:44:46,160
A random number that's used once number 1

976
00:44:46,160 --> 00:44:46,320
 nuts 

977
00:44:50,410 --> 00:44:51,120
And that's

978
00:44:51,130 --> 00:44:54,080
 that's hash functions 

979
00:44:54,080 --> 00:44:55,010
How do we do 

980
00:44:55,310 --> 00:44:56,320
They are a little off the skids 

981
00:44:56,540 --> 00:44:56,910
We are 

982
00:44:58,940 --> 00:45:01,483
Should be the number of characters in the house 

983
00:45:01,483 --> 00:45:02,210
She needs it 

984
00:45:03,020 --> 00:45:04,100
The output

985
00:45:04,100 --> 00:45:05,540
 not the input 

986
00:45:05,540 --> 00:45:05,900
No

987
00:45:05,900 --> 00:45:06,260
 no 

988
00:45:06,570 --> 00:45:07,480
For the number of characters 

989
00:45:07,520 --> 00:45:09,872
And you have still limited

990
00:45:09,872 --> 00:45:10,263
 right 

991
00:45:10,263 --> 00:45:10,849
So right 

992
00:45:10,849 --> 00:45:12,414
A pool of options that you have

993
00:45:12,414 --> 00:45:13,196
 but you have many

994
00:45:13,196 --> 00:45:15,151
 many transactions starts like a flow

995
00:45:15,151 --> 00:45:15,542
 right 

996
00:45:15,542 --> 00:45:16,324
So actually

997
00:45:16,324 --> 00:45:21,604
 you're just consuming and consuming hashtag up to the point where you are gonna repeat the hash

998
00:45:21,604 --> 00:45:21,800
 right

999
00:45:22,570 --> 00:45:22,800
 Spargo 

1000
00:45:22,940 --> 00:45:23,260
No

1001
00:45:24,130 --> 00:45:24,694
 what to say 

1002
00:45:24,694 --> 00:45:29,860
How should you have to keep your premium for random to which information you are referring 

1003
00:45:30,620 --> 00:45:31,330
So

1004
00:45:31,710 --> 00:45:33,090
 could you help me pronounce your first name 

1005
00:45:33,090 --> 00:45:38,030
Just to Jiang has asked the right question 

1006
00:45:38,040 --> 00:45:38,630
He's saying

1007
00:45:38,630 --> 00:45:38,820
 well

1008
00:45:38,830 --> 00:45:39,670
 how do you know 

1009
00:45:39,850 --> 00:45:43,700
Especially as you have more and more time and more and more time

1010
00:45:43,740 --> 00:45:49,630
 you might get the same output of a hash from different inputs 

1011
00:45:50,690 --> 00:45:51,930
And if you recall 

1012
00:45:54,470 --> 00:45:54,880
Wait

1013
00:45:55,320 --> 00:45:58,570
 somebody does recall now before brutish in front of brutish 

1014
00:45:59,360 --> 00:45:59,400
I mean

1015
00:45:59,500 --> 00:45:59,710
 yeah

1016
00:46:00,110 --> 00:46:03,610
 the papers imagine that it like it's possible that too

1017
00:46:03,610 --> 00:46:03,650
 like

1018
00:46:05,820 --> 00:46:06,720
 like the ash of X

1019
00:46:06,800 --> 00:46:08,170
 you go to ash of Y

1020
00:46:08,180 --> 00:46:09,520
 but it's if like

1021
00:46:10,000 --> 00:46:11,420
 the miners are working

1022
00:46:11,650 --> 00:46:12,060
 like

1023
00:46:12,120 --> 00:46:13,130
 not at the same time 

1024
00:46:13,140 --> 00:46:13,700
And if like

1025
00:46:14,110 --> 00:46:16,660
 the same information is not treated at the same exact time

1026
00:46:17,180 --> 00:46:19,190
 it won't be a problem because then like

1027
00:46:19,560 --> 00:46:20,870
 you just continue 

1028
00:46:21,420 --> 00:46:22,770
I'm just like two different 

1029
00:46:24,010 --> 00:46:25,450
So you're correct 

1030
00:46:25,490 --> 00:46:27,580
As it relates to mining 

1031
00:46:27,590 --> 00:46:29,730
But there is another piece of it as well 

1032
00:46:29,740 --> 00:46:31,330
Is that the hash function

1033
00:46:31,330 --> 00:46:36,410
 if it's a good cryptographic secure hash function is what's called collision resistant

1034
00:46:36,660 --> 00:46:39,100
 where what you're saying is so infeasible 

1035
00:46:39,230 --> 00:46:39,990
In fact

1036
00:46:40,120 --> 00:46:42,950
 one divided by 10 to the 40th 

1037
00:46:43,590 --> 00:46:43,860
You know

1038
00:46:43,890 --> 00:46:46,350
 that's a 1 with 40 zeros after it 

1039
00:46:46,380 --> 00:46:48,890
It's so infeasible to have it 

1040
00:46:50,130 --> 00:46:51,450
It's possible

1041
00:46:51,450 --> 00:46:52,930
 but infeasible to have it 

1042
00:46:54,370 --> 00:46:55,720
What you're referencing is

1043
00:46:55,720 --> 00:47:03,130
 is what if two parties solve the cryptographic puzzle as opposed to a collision 

1044
00:47:03,260 --> 00:47:07,350
And because the difficulty they just got it at the same time

1045
00:47:08,060 --> 00:47:08,640
 quiz

1046
00:47:09,100 --> 00:47:10,340
 it seemed like a dumb question 

1047
00:47:10,350 --> 00:47:12,150
But now there's no dumb questions 

1048
00:47:14,160 --> 00:47:14,370
Coming back

1049
00:47:15,350 --> 00:47:15,840
 timestamp 

1050
00:47:16,130 --> 00:47:17,190
So attributed 

1051
00:47:17,190 --> 00:47:19,470
So is it from the whole system 

1052
00:47:20,400 --> 00:47:25,540
So time stamps are not a particularly important part of Bitcoin 

1053
00:47:25,550 --> 00:47:26,790
They are timestamped

1054
00:47:27,990 --> 00:47:33,380
 but sometimes if somebody puts something off and it's off by a few minutes or even up to 2 hours

1055
00:47:35,120 --> 00:47:35,740
 there's a

1056
00:47:35,750 --> 00:47:36,310
 there's a

1057
00:47:36,500 --> 00:47:40,500
 there's a check in the technology and the scripting function 

1058
00:47:40,510 --> 00:47:44,260
If the time staffs off more than a couple hours 

1059
00:47:44,270 --> 00:47:45,170
So literally

1060
00:47:45,170 --> 00:47:47,650
 it's not of that precise 

1061
00:47:47,960 --> 00:47:57,005
Having said that the real way that time stamping happens is if if a block is mined and it's the 540 thousandth block 

1062
00:47:57,005 --> 00:48:00,610
And it's sort of accepted in all the nodes

1063
00:48:00,610 --> 00:48:03,890
 these 10000 nodes start mining the 540000 

1064
00:48:04,000 --> 00:48:07,370
And first block of that 

1065
00:48:07,420 --> 00:48:08,040
In essence

1066
00:48:08,040 --> 00:48:08,860
 it's just

1067
00:48:09,450 --> 00:48:09,810
 I think

1068
00:48:09,810 --> 00:48:11,430
 of it as almost like a stack 

1069
00:48:12,000 --> 00:48:13,230
And so what's

1070
00:48:13,940 --> 00:48:14,440
 in essence

1071
00:48:14,450 --> 00:48:18,040
 more relevant than the actual time that's in the header 

1072
00:48:18,050 --> 00:48:20,650
And they all have a timestamp in the header 

1073
00:48:22,560 --> 00:48:25,570
But what's more relevant is the order of the blocks 

1074
00:48:26,780 --> 00:48:29,040
And most importantly

1075
00:48:29,050 --> 00:48:30,670
 the previous block hash 

1076
00:48:33,620 --> 00:48:34,220
Yes

1077
00:48:34,420 --> 00:48:34,580
 I hadn't say that 

1078
00:48:34,930 --> 00:48:35,710
Without the time stamp

1079
00:48:35,920 --> 00:48:38,180
 you cannot do this difficulty readjustment 

1080
00:48:38,790 --> 00:48:40,774
The pineapple is very important 

1081
00:48:40,774 --> 00:48:43,420
If you don't have pineapple to the block

1082
00:48:43,420 --> 00:48:45,846
 you cannot do the difficulty adjustment

1083
00:48:45,846 --> 00:48:49,374
 which is necessary to keep the rate of bucks 10 minutes 

1084
00:48:49,374 --> 00:48:55,107
I'm gonna partially agree with you because the difficulty adjustment happens every two weeks 

1085
00:48:55,107 --> 00:49:00,840
So even if any one individual or five or six time stamps are a little goofed up in the two weeks

1086
00:49:01,960 --> 00:49:07,950
 the algorithm is basically looking over the course of about 2000 blocks 

1087
00:49:07,960 --> 00:49:08,390
So

1088
00:49:08,470 --> 00:49:10,340
 so a little good stuff is fine 

1089
00:49:10,350 --> 00:49:10,420
It's fine 

1090
00:49:10,420 --> 00:49:11,190
But you need the timestamp 

1091
00:49:12,240 --> 00:49:12,720
You need it 

1092
00:49:12,730 --> 00:49:13,500
Time stamps

1093
00:49:13,510 --> 00:49:13,840
 But it's

1094
00:49:13,840 --> 00:49:17,100
 and it's more important is basically the

1095
00:49:17,590 --> 00:49:17,980
 yeah

1096
00:49:18,500 --> 00:49:20,060
 I'll go back a slide 

1097
00:49:20,110 --> 00:49:21,590
It's the order of the blocks 

1098
00:49:21,600 --> 00:49:24,260
And please

1099
00:49:24,630 --> 00:49:26,820
 so we have to legends 

1100
00:49:27,720 --> 00:49:30,491
The paper didn't really go into detail

1101
00:49:30,491 --> 00:49:36,287
 but it said like in addition to how unlikely it is with like to the parliament 29th

1102
00:49:36,287 --> 00:49:41,074
 But even if there were two that hashed to the same kind of posh digest that

1103
00:49:41,074 --> 00:49:45,358
 it would be unlikely it would be valid in the context 

1104
00:49:45,358 --> 00:49:46,360
So like

1105
00:49:46,370 --> 00:49:51,785
 what's about blockchain transaction with that to reduce the likelihood of any problems

1106
00:49:51,785 --> 00:50:01,380
 which there was a lot of detail into why like the blockchain parts to be conscious even more unlike 

1107
00:50:06,070 --> 00:50:08,100
I want to hold that question for Tuesday

1108
00:50:08,100 --> 00:50:11,770
 but it has to do with rather than the collision issue 

1109
00:50:11,770 --> 00:50:16,780
What the papers talking about is if two miners solved the puzzle pieces

1110
00:50:17,390 --> 00:50:27,370
 and that doesn't mean that they got identical hashish because the puzzle is not geared to getting an exact hash 

1111
00:50:27,830 --> 00:50:32,950
The Bitcoin puzzle is having a certain number of leading zeros 

1112
00:50:32,960 --> 00:50:34,110
So it's literally

1113
00:50:34,170 --> 00:50:35,080
 it started 

1114
00:50:35,080 --> 00:50:37,490
I think it was 9 or 10 leading zeros 

1115
00:50:37,540 --> 00:50:39,160
I'm talking about 10 years ago 

1116
00:50:39,250 --> 00:50:41,390
And now you have to hash to something with 

1117
00:50:41,410 --> 00:50:43,470
I think it's about 20 or 26 

1118
00:50:43,650 --> 00:50:47,530
Leading zeroes are meaning it's gotten more and more difficult 

1119
00:50:47,930 --> 00:50:51,750
And the result of the hash has to have a bunch of leading zeros 

1120
00:50:51,750 --> 00:50:52,860
What you saw in that video 

1121
00:50:53,380 --> 00:50:53,920
I'm sorry 

1122
00:50:54,250 --> 00:50:56,830
I have a question on like how the hash does not gonna do 

1123
00:50:57,460 --> 00:50:58,400
Tash comes about 

1124
00:50:58,530 --> 00:51:02,130
So if it's only if it's only hashing the transactions

1125
00:51:02,140 --> 00:51:06,480
 how does it change when the hash of the previous blog changes 

1126
00:51:07,600 --> 00:51:07,840
Okay

1127
00:51:08,210 --> 00:51:11,070
 so idiot it

1128
00:51:11,080 --> 00:51:12,820
 it reminds me of that old television 

1129
00:51:12,820 --> 00:51:14,100
So Johnny Carson

1130
00:51:14,100 --> 00:51:16,130
 and you just did a great setup for the comedian 

1131
00:51:16,340 --> 00:51:17,540
So thank you 

1132
00:51:18,910 --> 00:51:20,330
So I'm going to go to Merkel roots 

1133
00:51:21,650 --> 00:51:22,730
So Merkel roots

1134
00:51:22,730 --> 00:51:25,580
 which are binary binary data tray

1135
00:51:25,640 --> 00:51:27,080
 looks something like this 

1136
00:51:28,090 --> 00:51:31,320
If one had 1000 transactions

1137
00:51:31,840 --> 00:51:33,520
 I wouldn't have a pretty slide 

1138
00:51:33,530 --> 00:51:36,190
So this only goes to four levels 

1139
00:51:36,200 --> 00:51:38,630
But think of four transactions at the bottom

1140
00:51:38,680 --> 00:51:38,710
 right 

1141
00:51:40,190 --> 00:51:41,560
They're each hashed 

1142
00:51:42,660 --> 00:51:45,110
And then you can catch me 

1143
00:51:45,260 --> 00:51:46,850
You put the two hashes together 

1144
00:51:46,850 --> 00:51:49,520
You hash that you keep going up the tray 

1145
00:51:49,530 --> 00:51:53,000
If you had 1000 transactions

1146
00:51:53,750 --> 00:51:56,078
 because that's tuitive a 10th

1147
00:51:56,078 --> 00:51:56,660
 roughly

1148
00:51:56,660 --> 00:51:59,570
 then you'd have 10 levels of this tray 

1149
00:52:00,520 --> 00:52:02,560
And so that's what happens 

1150
00:52:02,560 --> 00:52:08,971
And literally the mining pool operators are doing this a lot for the nodes 

1151
00:52:08,971 --> 00:52:14,280
But in the bitcoin and core application in the

1152
00:52:14,290 --> 00:52:18,030
 in the software that anybody in this room could download the software 

1153
00:52:18,040 --> 00:52:18,760
If you wish 

1154
00:52:18,780 --> 00:52:22,110
There is software that helps takes transactions

1155
00:52:22,900 --> 00:52:27,060
 puts them basically into this binary tree called a Merkel tree

1156
00:52:27,060 --> 00:52:37,630
 uses hash functions and basically skinnies it all the way up to the top is that I think what my question was was that if if the structure like

1157
00:52:37,839 --> 00:52:39,720
 given that the structure exists

1158
00:52:39,720 --> 00:52:42,645
 how does the root hash change with the previous block 

1159
00:52:42,645 --> 00:52:43,480
So basically

1160
00:52:43,480 --> 00:52:47,659
 based on the video that if you change the hash of the previous block

1161
00:52:47,659 --> 00:52:48,912
 all the blocks forward

1162
00:52:48,912 --> 00:52:51,420
 will get invalidated because the hash changes

1163
00:52:51,420 --> 00:52:53,927
 but it doesn't seem to use the previous hash 

1164
00:52:53,927 --> 00:53:03,940
So I'm gonna repeat the question does a Merkel root for that is basically a summary of the 10000 transactions that are in a block 

1165
00:53:04,000 --> 00:53:10,310
Change it if the rest of the header changes or the previous block change

1166
00:53:10,330 --> 00:53:12,310
 and the answer is no one

1167
00:53:13,770 --> 00:53:18,380
 it only changes if some of the data in the 10000 transactions changes 

1168
00:53:20,310 --> 00:53:29,770
And so a Merkel route will change if you put different transactions in the mix or as is really important 

1169
00:53:29,770 --> 00:53:30,900
One of the incentives

1170
00:53:31,770 --> 00:53:33,150
 you get your 12

1171
00:53:33,220 --> 00:53:38,150
5 Bitcoins today in what's called a Coinbase transaction 

1172
00:53:38,170 --> 00:53:41,650
And so one of these thousand transactions is the same 

1173
00:53:42,290 --> 00:53:44,160
The payment to the miner 

1174
00:53:44,950 --> 00:53:49,040
So the Merkel route would be different depending upon who wins 

1175
00:53:51,090 --> 00:53:52,820
But that wasn't your question 

1176
00:53:52,950 --> 00:53:53,660
I'm just saying 

1177
00:53:53,670 --> 00:53:59,870
But Merkel roots are a very efficient way to take thousands of transactions 

1178
00:53:59,980 --> 00:54:00,770
Store it up

1179
00:54:00,780 --> 00:54:01,990
 have one spot 

1180
00:54:04,170 --> 00:54:04,800
Police

1181
00:54:05,130 --> 00:54:12,110
 so the order of the different transaction has to be exactly the same for everyone that is hashing

1182
00:54:12,120 --> 00:54:12,580
 right 

1183
00:54:12,890 --> 00:54:13,490
No

1184
00:54:13,500 --> 00:54:14,600
 actually not 

1185
00:54:14,640 --> 00:54:20,430
So if you're hashing and you're running a mining rig and Alonzo running a mining rig

1186
00:54:20,800 --> 00:54:30,400
 if a line solves the puzzle and propagates it out on the network and people start mining on top of a lion's block because they say

1187
00:54:30,400 --> 00:54:31,080
 well

1188
00:54:31,120 --> 00:54:32,110
 he's finished

1189
00:54:32,110 --> 00:54:33,340
 you're not

1190
00:54:33,670 --> 00:54:39,080
 You're just going to probably start mining on the top of this block and look in something called the mem pool 

1191
00:54:39,080 --> 00:54:44,040
The memory pool is in this network of all the free floating transactions 

1192
00:54:44,040 --> 00:54:46,440
You'll scoop up the next set of transactions 

1193
00:54:46,860 --> 00:54:52,300
And so can how can we validate that all the transactions And he wrote

1194
00:54:52,620 --> 00:54:53,990
 are the real ones 

1195
00:54:54,550 --> 00:54:55,230
All right

1196
00:54:55,280 --> 00:54:56,400
 so validation

1197
00:54:56,400 --> 00:54:56,900
 which is

1198
00:54:56,910 --> 00:54:58,230
 which is more next Thursday

1199
00:54:58,240 --> 00:54:59,470
 But I'll give it a shot 

1200
00:54:59,810 --> 00:54:59,840
No

1201
00:54:59,840 --> 00:55:00,010
 no

1202
00:55:00,010 --> 00:55:00,290
 no 

1203
00:55:00,300 --> 00:55:01,390
It's a good question 

1204
00:55:01,850 --> 00:55:03,740
Every transaction 

1205
00:55:04,810 --> 00:55:05,350
Or actually

1206
00:55:05,350 --> 00:55:07,660
 you're setting me up digital signatures 

1207
00:55:07,670 --> 00:55:08,340
There you go 

1208
00:55:08,350 --> 00:55:09,000
Thank you 

1209
00:55:09,040 --> 00:55:09,800
Did you have a question 

1210
00:55:09,810 --> 00:55:10,620
Or I'm going to go ahead 

1211
00:55:10,630 --> 00:55:13,710
And do so the second cryptographic thing 

1212
00:55:13,760 --> 00:55:15,540
And we're going to keep going back and forth 

1213
00:55:15,650 --> 00:55:18,220
Hash functions are basically a way to compress 

1214
00:55:18,220 --> 00:55:18,900
A lot of data 

1215
00:55:19,410 --> 00:55:20,420
Have a fingerprint 

1216
00:55:21,140 --> 00:55:23,410
Make sure that it's basically commitment 

1217
00:55:25,300 --> 00:55:26,480
Digital signatures 

1218
00:55:26,490 --> 00:55:26,710
Well

1219
00:55:26,710 --> 00:55:28,220
 remember that little graph that we had 

1220
00:55:28,220 --> 00:55:28,990
Alice and Bob 

1221
00:55:30,190 --> 00:55:33,670
Alice wants to send a note to Bob and just say hello

1222
00:55:33,680 --> 00:55:34,080
 Bob 

1223
00:55:34,690 --> 00:55:36,040
She wants to encrypt it 

1224
00:55:36,840 --> 00:55:39,320
She encrypts it with Bob Public Key 

1225
00:55:40,280 --> 00:55:41,204
Send it to him 

1226
00:55:41,204 --> 00:55:43,516
He decrypts it with his private key 

1227
00:55:43,516 --> 00:55:44,441
You might say

1228
00:55:44,441 --> 00:55:45,135
 oh my God

1229
00:55:45,135 --> 00:55:47,216
 Ganesler what's a private key 

1230
00:55:47,216 --> 00:55:49,759
What's a public key in cryptography 

1231
00:55:49,759 --> 00:55:52,764
It's a way to kind of scramble information 

1232
00:55:52,764 --> 00:55:54,845
I know I'm really making this like

1233
00:55:54,845 --> 00:55:55,539
 but it it 

1234
00:55:55,539 --> 00:55:59,310
So if we went back to that little mechanism

1235
00:55:59,930 --> 00:56:04,770
 the Romans used or were used with the Germans used in the Enigma machine 

1236
00:56:05,560 --> 00:56:08,080
They were symmetric cryptography 

1237
00:56:09,450 --> 00:56:11,220
Both people had the key 

1238
00:56:11,400 --> 00:56:18,250
The key was the Enigma machine with five roaders in the 1970 S 

1239
00:56:18,270 --> 00:56:22,940
Some wonderful technologist here elsewhere basically said

1240
00:56:22,940 --> 00:56:23,080
 well

1241
00:56:23,080 --> 00:56:28,450
 what if the key isn't the same because the adversary could steal the key 

1242
00:56:29,010 --> 00:56:30,450
What if it's not symmetric 

1243
00:56:30,450 --> 00:56:31,570
But it's asymmetric 

1244
00:56:31,580 --> 00:56:33,330
There's a private key and a public key 

1245
00:56:33,750 --> 00:56:34,220
In essence

1246
00:56:34,220 --> 00:56:43,740
 there's two keys that have some mathematical relationships and the math between these two keys don't matter for a class like this

1247
00:56:43,740 --> 00:56:48,580
 but know that the public key and the private key link together

1248
00:56:50,010 --> 00:56:51,810
 they're bonded together 

1249
00:56:52,870 --> 00:56:56,950
But the critical thing is about digital signatures 

1250
00:56:57,410 --> 00:56:58,910
There's three functions 

1251
00:56:58,920 --> 00:57:00,550
You have to generate a key pair 

1252
00:57:00,550 --> 00:57:02,610
And when a key pair is generated

1253
00:57:02,630 --> 00:57:07,170
 a public key and a private key are generated at the same time

1254
00:57:08,200 --> 00:57:11,130
 and they need a random number to go into it 

1255
00:57:11,570 --> 00:57:16,480
And one of the things that makes a lot of Bitcoin and other wallets insecure

1256
00:57:18,220 --> 00:57:20,520
 And it's probably why some have been hacked 

1257
00:57:21,030 --> 00:57:21,800
The wallets

1258
00:57:21,800 --> 00:57:25,820
 not Bitcoin is because they don't have good random number generation 

1259
00:57:25,850 --> 00:57:26,380
Yes

1260
00:57:26,420 --> 00:57:26,940
 brutish 

1261
00:57:28,840 --> 00:57:38,990
I saw I was at a conference last week where a technologist from University of Pennsylvania had done a survey of 150 hedge funds

1262
00:57:39,000 --> 00:57:43,490
 mining companies and Bitcoin wallet companies and the like 

1263
00:57:43,500 --> 00:57:50,120
So they actually let a cyber security individual get inside and do a survey of 150

1264
00:57:50,230 --> 00:57:56,770
 which you would consider really committed high end users of Bitcoin miners and hedge funds 

1265
00:57:56,770 --> 00:57:59,830
And crypto exchange is 

1266
00:58:00,460 --> 00:58:01,860
And it was horrifying 

1267
00:58:01,970 --> 00:58:09,160
Their cyber security as to how they're what they're doing with their private keys before even got to the private keys 

1268
00:58:09,160 --> 00:58:15,120
Many of them didn't really have a secure way to create the random numbers to create their private keys 

1269
00:58:15,130 --> 00:58:21,978
And so it's just a piece when somebody says they have really good private key public key in the back

1270
00:58:21,978 --> 00:58:22,476
 your mind

1271
00:58:22,476 --> 00:58:22,974
 Just no

1272
00:58:22,974 --> 00:58:27,203
 there's got to be some way to do a random number generation 

1273
00:58:27,203 --> 00:58:31,682
That's the only math that I'm going to ask you to remember about 

1274
00:58:33,540 --> 00:58:35,120
There is a signature function 

1275
00:58:35,120 --> 00:58:37,940
And the key thing is a signature creates 

1276
00:58:37,950 --> 00:58:42,380
You can create a digital signature from a message and a private key 

1277
00:58:45,110 --> 00:58:52,520
So if Kelly has a private kid and wants to send a secret message to somebody across the room

1278
00:58:52,970 --> 00:58:53,580
 Isabella

1279
00:58:53,580 --> 00:58:54,920
 you want a message from Kelly 

1280
00:58:57,400 --> 00:58:59,150
Kelly is gonna take the message 

1281
00:59:00,210 --> 00:59:00,670
You got this 

1282
00:59:00,670 --> 00:59:01,200
Kelly

1283
00:59:01,850 --> 00:59:05,070
 you're going to take the message and you're gonna sign it with a private K 

1284
00:59:07,130 --> 00:59:08,700
You send it over to Isabella 

1285
00:59:10,940 --> 00:59:12,060
How's the Elizabeth now 

1286
00:59:12,060 --> 00:59:12,880
That is from you 

1287
00:59:14,550 --> 00:59:16,020
She has to decrypt it 

1288
00:59:19,210 --> 00:59:20,640
She's got to verify it 

1289
00:59:20,700 --> 00:59:23,590
So there's a function called a verification function 

1290
00:59:23,630 --> 00:59:24,730
And it comes back just

1291
00:59:24,730 --> 00:59:25,080
 yes

1292
00:59:25,080 --> 00:59:25,600
 no

1293
00:59:26,130 --> 00:59:26,350
 I mean

1294
00:59:26,350 --> 00:59:28,200
 it might say it's differently

1295
00:59:28,200 --> 00:59:29,230
 but it's a just a yes 

1296
00:59:29,230 --> 00:59:29,610
No

1297
00:59:29,930 --> 00:59:31,610
 it's a verification function 

1298
00:59:31,630 --> 00:59:32,710
Isabella

1299
00:59:32,790 --> 00:59:39,570
 you want to do this with me is going to verify your signature is valid for this message 

1300
00:59:39,580 --> 00:59:41,950
And because you have the public K

1301
00:59:42,620 --> 00:59:43,610
 so you're right

1302
00:59:43,620 --> 00:59:45,050
 Isabella has your public key 

1303
00:59:46,750 --> 00:59:49,100
But using your public case

1304
00:59:49,230 --> 00:59:51,290
 she can verify that the signature 

1305
00:59:51,930 --> 00:59:53,260
It's magical math

1306
00:59:53,990 --> 00:59:55,350
 but it's not magical math 

1307
00:59:55,370 --> 00:59:56,480
It's real math 

1308
00:59:57,020 --> 00:59:58,164
But it's not math 

1309
00:59:58,164 --> 01:00:00,740
We need to study in this class 

1310
01:00:00,740 --> 01:00:01,026
Yes

1311
01:00:01,026 --> 01:00:01,312
 Hugo

1312
01:00:01,598 --> 01:00:03,887
 that to generate any cute hair 

1313
01:00:03,887 --> 01:00:04,460
Yeah 

1314
01:00:04,750 --> 01:00:11,450
So they're both generated from the random number or like the privacy is not determined by the public here 

1315
01:00:13,520 --> 01:00:14,270
The pup 

1316
01:00:14,500 --> 01:00:15,920
You can think of it 

1317
01:00:16,260 --> 01:00:17,130
In Bitcoin

1318
01:00:17,130 --> 01:00:21,320
 it uses an elliptic curve cryptography 

1319
01:00:21,430 --> 01:00:22,470
And you can think of it 

1320
01:00:22,470 --> 01:00:28,410
Is that the private key is based on the random number 

1321
01:00:29,310 --> 01:00:30,680
It's based it to me

1322
01:00:30,680 --> 01:00:31,310
 more technical 

1323
01:00:31,310 --> 01:00:31,870
It's the

1324
01:00:34,790 --> 01:00:37,490
 the random number is what gets you to the public key 

1325
01:00:38,160 --> 01:00:40,070
But I think of it as the private keys

1326
01:00:40,070 --> 01:00:41,560
 almost the random number 

1327
01:00:41,580 --> 01:00:43,670
And then the public key is generated along with it 

1328
01:00:44,320 --> 01:00:44,690
You can have it on 

1329
01:00:46,870 --> 01:00:47,600
Yes

1330
01:00:49,300 --> 01:00:56,250
 so when you pick around the number actually become 0 and 2 to the 2 56 that are probably to pick a public key

1331
01:00:56,250 --> 01:00:58,060
 You derive it directly from the private key 

1332
01:00:58,340 --> 01:00:58,850
In fact

1333
01:00:58,930 --> 01:01:02,140
 all you do is you exponentiate another number by your private kit 

1334
01:01:02,330 --> 01:01:02,360
And

1335
01:01:03,490 --> 01:01:03,850
 so it's

1336
01:01:03,850 --> 01:01:08,290
 you can think of the public key as a one way function of the private key 

1337
01:01:08,340 --> 01:01:09,750
So given a public key

1338
01:01:09,820 --> 01:01:11,100
 you cannot recover the private key 

1339
01:01:11,100 --> 01:01:11,630
If you could

1340
01:01:11,630 --> 01:01:13,380
 then you could sign which one can be disastrous 

1341
01:01:16,250 --> 01:01:18,820
And instead of exponentiation in Bitcoin

1342
01:01:18,820 --> 01:01:19,380
 it uses

1343
01:01:19,380 --> 01:01:22,190
 and it costs a function called the elliptic curve 

1344
01:01:22,350 --> 01:01:24,080
But so what properties 

1345
01:01:24,080 --> 01:01:26,150
And these are the key economic properties

1346
01:01:26,150 --> 01:01:28,070
 as well as cryptographic properties 

1347
01:01:28,330 --> 01:01:29,010
Basically

1348
01:01:29,010 --> 01:01:30,090
 it's infeasible 

1349
01:01:30,090 --> 01:01:30,380
And again

1350
01:01:30,380 --> 01:01:31,930
 I use the word infeasible 

1351
01:01:31,940 --> 01:01:33,100
I didn't say impossible

1352
01:01:34,100 --> 01:01:38,900
 even though Eileen might want to tell me that it's whenever 10 to the 40th or something

1353
01:01:39,100 --> 01:01:44,350
 but it's infeasible to find a private key from a public key to reverse engineer Sil 

1354
01:01:44,770 --> 01:01:47,650
So even if you can't find the private key

1355
01:01:48,300 --> 01:01:53,980
 like in the case of Kelly and Isabella and I knew Kelley's public key

1356
01:01:54,740 --> 01:01:59,220
 could I send a message to Isabella impersonating Kelly 

1357
01:02:01,400 --> 01:02:04,320
You need to do a signature 

1358
01:02:05,521 --> 01:02:09,903
If you please just run your eye up there to do a digital signature

1359
01:02:09,903 --> 01:02:12,210
 you need a private key and a message 

1360
01:02:12,210 --> 01:02:19,810
And it's a function of the message and the private key by sir 

1361
01:02:19,810 --> 01:02:21,400
Let's call it complex math 

1362
01:02:22,490 --> 01:02:28,540
That digital signature was created from the private key 

1363
01:02:30,060 --> 01:02:33,310
And the public key was created from the private key 

1364
01:02:34,150 --> 01:02:44,590
And to oversimplify the reason that the verify function works is because both the digital signature is and the public key that Isabella has 

1365
01:02:44,600 --> 01:02:46,930
Isabella has this digital signature

1366
01:02:47,640 --> 01:02:50,530
 and she has the public key 

1367
01:02:51,030 --> 01:02:52,330
And she has the message 

1368
01:02:54,060 --> 01:02:58,690
The math is such that basically the private key

1369
01:02:58,700 --> 01:02:59,400
 if you wish

1370
01:02:59,410 --> 01:03:01,170
 almost like factors out

1371
01:03:01,660 --> 01:03:01,930
 you know

1372
01:03:01,940 --> 01:03:02,680
 you

1373
01:03:02,790 --> 01:03:04,860
 but it think of two functions 

1374
01:03:04,870 --> 01:03:09,090
She's got the Isabella has kelley's publicly the message

1375
01:03:09,100 --> 01:03:10,380
 the digital signature

1376
01:03:10,390 --> 01:03:12,090
 it either verifies or it doesn't

1377
01:03:12,100 --> 01:03:14,470
 but she never has to see the private key 

1378
01:03:14,580 --> 01:03:15,080
And in fact

1379
01:03:15,090 --> 01:03:17,700
 Kelly does not want her to ever see the private key 

1380
01:03:18,260 --> 01:03:18,568
Eric 

1381
01:03:18,876 --> 01:03:27,050
Maybe just to simplify that the way the validation of a digital signature works as Katie's 

1382
01:03:29,950 --> 01:03:36,020
Is run through a hash function which generates a house and is encrypted with current private 

1383
01:03:37,480 --> 01:03:42,961
Then the message are encrypted and the C digital signature goes to Isabella 

1384
01:03:42,961 --> 01:03:43,744
Isabella 

1385
01:03:43,744 --> 01:03:57,400
What she does is uses the same hash function to run it with to generate the heart function and uses the public here of Kelly to unencrypt the signature and compare those to with those two hatches correspond 

1386
01:03:57,590 --> 01:04:02,740
That means that if the message belongs to Kelly and it hasn't been tampered with 

1387
01:04:02,750 --> 01:04:09,690
So that's the more or less simplification of the digital signature of the well

1388
01:04:09,690 --> 01:04:11,652
 I don't know the so 

1389
01:04:11,652 --> 01:04:12,348
So I mean

1390
01:04:12,348 --> 01:04:19,780
 the key is basically that there's a scheme unrelated to Bitcoin that exists for many other reasons on the Internet 

1391
01:04:20,150 --> 01:04:27,170
Many other reasons in commerce and in war that this public key

1392
01:04:27,180 --> 01:04:29,400
 private key cryptography 

1393
01:04:29,950 --> 01:04:33,010
And it's not simply just going back

1394
01:04:33,210 --> 01:04:35,800
 it's not just simply Alice sending something 

1395
01:04:35,810 --> 01:04:37,760
It's also digital signatures 

1396
01:04:38,240 --> 01:04:40,070
You generate the keypair

1397
01:04:40,100 --> 01:04:41,500
 everything in Bitcoin

1398
01:04:41,500 --> 01:04:44,030
 everything in Ethereum has key pairs

1399
01:04:44,030 --> 01:04:47,070
 public key and private key a digital signature 

1400
01:04:47,400 --> 01:04:49,580
But Kelly never lose your private too 

1401
01:04:51,380 --> 01:04:51,980
You got that 

1402
01:04:51,990 --> 01:04:52,260
Do not 

1403
01:04:53,070 --> 01:04:53,620
And by the way

1404
01:04:53,620 --> 01:05:00,220
 you have to create it with a good random number generator because most sophisticated hedge funds around the world aren't 

1405
01:05:00,230 --> 01:05:01,690
So you're going to be better than those 

1406
01:05:01,810 --> 01:05:04,270
That's what I learned at a conference I was at recently 

1407
01:05:04,770 --> 01:05:06,750
And then there's a verification function

1408
01:05:07,750 --> 01:05:10,570
 a quick question about the random number generator

1409
01:05:10,570 --> 01:05:12,450
 and the verification function 

1410
01:05:12,540 --> 01:05:22,850
So is there any like third party generating the generator or the generator is like a function already existing 

1411
01:05:23,000 --> 01:05:24,570
And like already there

1412
01:05:24,700 --> 01:05:25,040
 it's a lot of 

1413
01:05:26,330 --> 01:05:26,581
So 

1414
01:05:26,581 --> 01:05:28,091
So the question is

1415
01:05:28,091 --> 01:05:31,615
 is if random number generation is so important

1416
01:05:31,615 --> 01:05:38,411
 are there outside parties that have good software in essence to produce the random number generation 

1417
01:05:38,411 --> 01:05:39,922
And the answer is yes 

1418
01:05:39,922 --> 01:05:42,187
And there's some that are not so good 

1419
01:05:42,187 --> 01:05:42,690
And yes

1420
01:05:42,690 --> 01:05:44,201
 some good laptops have it 

1421
01:05:44,452 --> 01:05:45,459
At the heart

1422
01:05:45,459 --> 01:05:46,970
 I want to skip ahead 

1423
01:05:47,390 --> 01:05:49,820
Elliptic curve digital signature algorithm 

1424
01:05:49,930 --> 01:05:56,480
That's the actual algorithm that Bitcoin uses to take the private K and so forth 

1425
01:05:56,750 --> 01:05:58,980
But many of the wallets

1426
01:05:59,210 --> 01:05:59,710
 if you

1427
01:05:59,720 --> 01:06:07,620
 if you download a wallet application to hold your Bitcoin to hold your light coin to hold some other coin

1428
01:06:07,630 --> 01:06:10,590
 that wallet application has a lot

1429
01:06:12,130 --> 01:06:15,590
 a random number generation software 

1430
01:06:15,610 --> 01:06:19,130
I can attest to all the random number generation software 

1431
01:06:19,150 --> 01:06:20,690
I'm not a cybersecurity

1432
01:06:21,330 --> 01:06:22,200
 expert

1433
01:06:22,290 --> 01:06:26,280
 but there's probably a range of some that are a little bit more 

1434
01:06:27,890 --> 01:06:29,380
There are stronger ones 

1435
01:06:29,670 --> 01:06:43,550
The key to random number generation is if you're generating any lengths that it truly is not clumpier that that I would say it's what maximum entropy

1436
01:06:44,110 --> 01:06:44,370
 you know

1437
01:06:44,380 --> 01:06:49,510
 and that you really don't have any clumps if it all clumps in one area

1438
01:06:49,510 --> 01:06:51,590
 then that's not great randomness 

1439
01:06:52,100 --> 01:06:59,000
So I just want to finish because there's one other thing we're going to chat about to lay the groundwork is Bitcoin addresses 

1440
01:06:59,010 --> 01:06:59,930
I put that up 

1441
01:06:59,940 --> 01:07:01,950
You can look at the slides later 

1442
01:07:01,980 --> 01:07:04,180
The details don't matter much 

1443
01:07:05,000 --> 01:07:06,480
But the key thing is

1444
01:07:06,500 --> 01:07:11,440
 is that when you hear somebody talk about public keys and Bitcoin addresses

1445
01:07:11,450 --> 01:07:12,890
 colloquially

1446
01:07:12,910 --> 01:07:14,890
 we all reference them the same 

1447
01:07:15,080 --> 01:07:20,310
They're actually not the technology that Nakamoto did

1448
01:07:20,510 --> 01:07:24,080
 was he uses the public key 

1449
01:07:24,940 --> 01:07:30,050
He literally hashed it twice once with with this program

1450
01:07:30,060 --> 01:07:32,700
 this hash function called shot 2 56 

1451
01:07:32,730 --> 01:07:43,710
Another hash function then concatenates and puts a little check sum at the end and then uses something called a base 58 to make it even shorter 

1452
01:07:45,160 --> 01:07:51,570
I've gone back and read some of nakamoto's emails for the two years after he published all this

1453
01:07:51,570 --> 01:07:53,080
 and I've read other things 

1454
01:07:53,090 --> 01:08:01,230
My understanding is is the reason there's two hash functions and actually two different lines was just to make everything a bit more secure 

1455
01:08:02,310 --> 01:08:02,680
Also

1456
01:08:02,690 --> 01:08:04,170
 a public key is a very long 

1457
01:08:04,420 --> 01:08:06,130
It's about 512 b 

1458
01:08:07,750 --> 01:08:14,970
And so you can shrink the data and make the data more compressed by hashing it

1459
01:08:15,080 --> 01:08:17,490
 which took it to 256 b 

1460
01:08:17,490 --> 01:08:18,900
He hashes it twice 

1461
01:08:19,080 --> 01:08:21,180
And then he does it as base 58 

1462
01:08:21,190 --> 01:08:23,360
That makes it even a little tighter 

1463
01:08:24,530 --> 01:08:26,930
So for all purposes

1464
01:08:26,930 --> 01:08:29,150
 you can go ahead and just use public key 

1465
01:08:29,150 --> 01:08:30,920
And Bitcoin address is the same 

1466
01:08:30,930 --> 01:08:31,520
But remember

1467
01:08:31,520 --> 01:08:33,090
 back in the mind

1468
01:08:33,100 --> 01:08:33,420
 Oh

1469
01:08:33,430 --> 01:08:33,780
 actually

1470
01:08:33,780 --> 01:08:34,450
 there are

1471
01:08:34,460 --> 01:08:35,570
 there are little different 

1472
01:08:35,980 --> 01:08:39,670
And Bitcoin addresses are a little bit more secure

1473
01:08:39,670 --> 01:08:40,850
 supposedly 

1474
01:08:40,900 --> 01:08:41,410
And less

1475
01:08:41,410 --> 01:08:41,820
 of course

1476
01:08:41,820 --> 01:08:45,790
 somebody's hacked into your wallet and figured out all these little details 

1477
01:08:46,850 --> 01:08:52,890
A Bitcoin address is a little bit like the signatures on these notes we talked about

1478
01:08:54,530 --> 01:08:54,900
 right 

1479
01:08:54,910 --> 01:08:55,370
Remember what 

1480
01:08:55,390 --> 01:08:57,900
And half of you don't use checking accounts

1481
01:08:58,970 --> 01:09:01,780
 but these are early forms of checks 

1482
01:09:02,320 --> 01:09:08,750
And there's a signature on the bottom that's really kind of a Bitcoin address that I'm sorry 

1483
01:09:08,750 --> 01:09:11,220
The signature is the digital signature

1484
01:09:11,830 --> 01:09:12,650
 the address

1485
01:09:12,650 --> 01:09:15,360
 the Bitcoin address is who it's paid for 

1486
01:09:15,370 --> 01:09:17,750
And I promise last slide

1487
01:09:17,760 --> 01:09:19,610
 we're going to be talking about this next week 

1488
01:09:19,620 --> 01:09:20,890
Transactions

1489
01:09:20,900 --> 01:09:23,880
 all that stuff that rolls up into the Merkel trees

1490
01:09:23,890 --> 01:09:24,980
 all that little 

1491
01:09:25,070 --> 01:09:26,250
Anybody important 

1492
01:09:27,860 --> 01:09:31,010
They basically have an input and an output

1493
01:09:32,100 --> 01:09:34,220
 the input and a lot of time 

1494
01:09:34,730 --> 01:09:38,600
But the input is a previous transaction 

1495
01:09:39,020 --> 01:09:42,630
This uniquely identifies basically money 

1496
01:09:44,530 --> 01:09:47,430
And you're going to send value in Satoshis 

1497
01:09:49,480 --> 01:09:53,140
He named the unit of account for himself 

1498
01:09:54,380 --> 01:09:56,840
There's a lot of Satoshis and everyone Bitcoin 

1499
01:09:56,840 --> 01:09:58,950
That's why we don't hear much about Satoshis 

1500
01:09:58,950 --> 01:10:03,140
But there's 10 to the 8th Satoshis and every one Bitcoin 

1501
01:10:04,310 --> 01:10:08,650
So when you actually enter in the computer code and a transaction

1502
01:10:08,650 --> 01:10:10,310
 you're doing it in Satoshis 

1503
01:10:11,720 --> 01:10:13,130
And it's sent to a public key 

1504
01:10:13,640 --> 01:10:14,540
That's a coin 

1505
01:10:15,140 --> 01:10:18,670
That is what the incentive systems all about 

1506
01:10:21,390 --> 01:10:22,930
Any other questions 

1507
01:10:24,510 --> 01:10:25,350
And this was just that 

1508
01:10:25,360 --> 01:10:26,740
I know it was a lot 

1509
01:10:27,530 --> 01:10:30,040
I wonder how many of you are gonna come back on Thursday 

1510
01:10:31,440 --> 01:10:31,790
No

1511
01:10:31,800 --> 01:10:32,040
 let me

1512
01:10:32,040 --> 01:10:33,020
 let me say this 

1513
01:10:33,030 --> 01:10:34,780
It's not just that we're at MIT

1514
01:10:34,800 --> 01:10:35,940
 but we are at MIT 

1515
01:10:35,950 --> 01:10:36,280
Come on

1516
01:10:37,470 --> 01:10:42,760
 Everybody in this room can get these kind of key concepts 

1517
01:10:43,130 --> 01:10:48,420
The key questions that we talked about were Time stamp to pet and only logs 

1518
01:10:48,420 --> 01:10:49,590
Is anybody want to tell me what a time 

1519
01:10:49,890 --> 01:10:54,300
What if this class here in the next 7 minutes can get these two concepts 

1520
01:10:54,860 --> 01:10:57,050
That's all we talked about for the last hour 

1521
01:10:57,390 --> 01:10:58,060
So

1522
01:10:58,310 --> 01:11:00,300
 I don't know your name in the orange shirt 

1523
01:11:02,020 --> 01:11:02,540
What's that

1524
01:11:02,540 --> 01:11:02,750
 Cambridge

1525
01:11:03,700 --> 01:11:04,190
 Andrew 

1526
01:11:04,190 --> 01:11:04,850
What's time 

1527
01:11:04,860 --> 01:11:06,570
Append only logs time 

1528
01:11:06,600 --> 01:11:07,200
Snap a pen 

1529
01:11:07,200 --> 01:11:12,610
Delay logs is essentially a record of transactions or a block is blockchain uses it

1530
01:11:13,110 --> 01:11:13,880
 with a time 

1531
01:11:13,880 --> 01:11:15,460
And that can't be changed in the future 

1532
01:11:15,590 --> 01:11:16,630
So you can only add on transaction 

1533
01:11:17,060 --> 01:11:26,260
So it's kind of immutable because of all this cryptography is Stuart Haber was making it in a time stamped a pet and only log 

1534
01:11:26,260 --> 01:11:28,040
And he was placing it where

1535
01:11:28,050 --> 01:11:28,530
 Carolyn

1536
01:11:28,530 --> 01:11:29,150
 you still with me 

1537
01:11:29,150 --> 01:11:30,240
Where was Haver putting it out 

1538
01:11:31,360 --> 01:11:31,750
New York Times

1539
01:11:31,930 --> 01:11:32,830
 New York Times 

1540
01:11:32,830 --> 01:11:33,820
There you go 

1541
01:11:33,920 --> 01:11:35,300
In the classified sections 

1542
01:11:37,600 --> 01:11:38,280
So it just

1543
01:11:38,290 --> 01:11:42,890
 it's a bunch of blocks of data compressed up 

1544
01:11:42,910 --> 01:11:47,150
So we talked about something called Merkel trees and Merkel roots just think about it 

1545
01:11:47,460 --> 01:11:50,670
That's a way to take a lot of information and compress it

1546
01:11:51,150 --> 01:11:56,930
 but also make it searchable later because 1000 transactions when we talk next week

1547
01:11:56,940 --> 01:11:58,740
 you have to be able to verify 

1548
01:11:58,740 --> 01:12:00,420
Somebody asks me about how to verify

1549
01:12:00,420 --> 01:12:00,720
 right 

1550
01:12:01,310 --> 01:12:01,340
Okay

1551
01:12:01,520 --> 01:12:03,030
 when you go back to verify

1552
01:12:03,040 --> 01:12:10,480
 you need an index number to find it out in that Merkel tree situation and it's secured through hash functions 

1553
01:12:10,480 --> 01:12:14,350
Anybody want to tell me the easiest lay definition of a hash hash function 

1554
01:12:16,740 --> 01:12:17,620
Jennifer

1555
01:12:18,680 --> 01:12:19,560
 it's like a map 

1556
01:12:22,110 --> 01:12:25,580
The lozo members can step to just one

1557
01:12:26,230 --> 01:12:26,360
 right 

1558
01:12:27,240 --> 01:12:31,570
You could take a picture of this classroom and everybody exactly 

1559
01:12:32,670 --> 01:12:35,620
And they could map into something 

1560
01:12:35,760 --> 01:12:37,280
I don't know what a QR code 

1561
01:12:37,280 --> 01:12:38,810
Be a form of a hash 

1562
01:12:41,010 --> 01:12:42,862
Not cryptographically secure

1563
01:12:42,862 --> 01:12:43,686
 but is it a

1564
01:12:43,686 --> 01:12:48,626
 Is it a hash somewhere with different representation for some data rather than binary 

1565
01:12:48,626 --> 01:12:49,449
You are using 

1566
01:12:49,449 --> 01:12:50,067
All right

1567
01:12:50,067 --> 01:12:51,302
 so I failed that one 

1568
01:12:51,302 --> 01:12:51,920
It didn't 

1569
01:12:53,140 --> 01:12:54,210
It often stores actually 

1570
01:12:55,800 --> 01:13:02,290
So cryptographic hash function is a way to take not only a lot of information and put it into a fixed form 

1571
01:13:02,320 --> 01:13:06,890
But the key thing here is the hash functions are what tie the blocks together 

1572
01:13:06,910 --> 01:13:10,610
Because hash functions can point to previous information 

1573
01:13:10,830 --> 01:13:12,150
And as the video showed

1574
01:13:12,830 --> 01:13:16,260
 if you change any of the underlying information

1575
01:13:16,320 --> 01:13:17,890
 the hash changes 

1576
01:13:17,900 --> 01:13:19,620
So what does that give you 

1577
01:13:21,270 --> 01:13:23,600
It basically secures the data 

1578
01:13:23,620 --> 01:13:25,410
You know if somebody's tampered 

1579
01:13:25,580 --> 01:13:30,620
So the only reason to really learn about hash functions is it's to say

1580
01:13:30,620 --> 01:13:30,810
 oh

1581
01:13:30,810 --> 01:13:31,550
 I get it 

1582
01:13:31,620 --> 01:13:35,380
This is one of the ways to make this data tamper proof 

1583
01:13:36,740 --> 01:13:39,341
So I have a question about a theo

1584
01:13:39,341 --> 01:13:44,109
 theoretical event where a better hash function hash function is found 

1585
01:13:44,109 --> 01:13:44,543
Then the

1586
01:13:44,759 --> 01:13:45,410
 shout out 

1587
01:13:46,320 --> 01:13:50,320
And how would that be implemented into the Bitcoin network practical

1588
01:13:50,988 --> 01:13:53,725
 there needs to be a pretentious 

1589
01:13:53,725 --> 01:13:54,222
And so

1590
01:13:54,222 --> 01:13:54,471
 so

1591
01:13:54,471 --> 01:13:55,520
 so how

1592
01:13:55,540 --> 01:14:04,000
 how would any relevant change be adopted in the Bitcoin is always a challenge because it's a decentralized network 

1593
01:14:04,160 --> 01:14:08,840
And all decentralized networks have a little bit of a governance challenge 

1594
01:14:09,110 --> 01:14:12,360
The governance challenge is how do you do software updates 

1595
01:14:12,560 --> 01:14:16,180
We all know that on our laptops are our iPhones 

1596
01:14:16,830 --> 01:14:19,720
There's probably software updates going on here now

1597
01:14:19,800 --> 01:14:21,130
 unbeknownst to me

1598
01:14:21,730 --> 01:14:22,110
 right 

1599
01:14:22,130 --> 01:14:23,740
They're probably just apples drop 

1600
01:14:23,840 --> 01:14:24,220
And I mean

1601
01:14:24,220 --> 01:14:25,770
 who knows what they're doing in here

1602
01:14:25,770 --> 01:14:26,110
 right 

1603
01:14:26,620 --> 01:14:27,590
And Uber

1604
01:14:27,590 --> 01:14:29,050
 I really one of my favorites 

1605
01:14:29,050 --> 01:14:31,410
Who knows what's happening inside this phone 

1606
01:14:31,420 --> 01:14:35,620
But the commercial enterprise

1607
01:14:35,620 --> 01:14:36,570
 the central authority

1608
01:14:36,570 --> 01:14:38,240
 has a way to update the software 

1609
01:14:38,240 --> 01:14:40,500
We probably sign some terms of use 

1610
01:14:40,500 --> 01:14:41,620
That allows them to do that 

1611
01:14:41,660 --> 01:14:45,410
And I in a decentralized network like this

1612
01:14:45,750 --> 01:14:47,630
 there has to be consensus 

1613
01:14:48,090 --> 01:14:53,430
And so the only way really to update the software for a new hash function

1614
01:14:54,260 --> 01:14:57,110
 or for most everything else is

1615
01:14:57,130 --> 01:14:57,910
 in essence

1616
01:14:57,910 --> 01:14:59,980
 that the nodes

1617
01:14:59,980 --> 01:15:01,500
 the operators of the software

1618
01:15:01,510 --> 01:15:03,660
 collectively in a consensus form

1619
01:15:03,670 --> 01:15:04,210
 adopted 

1620
01:15:04,630 --> 01:15:12,290
So it's another way that not only is the data immutable because of these hash functions

1621
01:15:13,560 --> 01:15:15,040
 but the software is

1622
01:15:15,050 --> 01:15:18,430
 and that comes both with benefits and costs 

1623
01:15:18,580 --> 01:15:20,970
Some people would say that's a bug of blockchain 

1624
01:15:20,970 --> 01:15:25,960
Some people would say it's a feature You can come to your own judgment over the course of the semester

1625
01:15:25,970 --> 01:15:37,150
 but the software is harder to update than software in centralized authorities because centralized authorities just say they just push the

1626
01:15:38,320 --> 01:15:40,600
 Now sometimes you have to click and say update 

1627
01:15:41,360 --> 01:15:42,130
So it

1628
01:15:42,670 --> 01:15:43,050
 but

1629
01:15:43,870 --> 01:15:45,070
 but don't be naive 

1630
01:15:45,080 --> 01:15:46,750
Not every software

1631
01:15:47,250 --> 01:15:47,820
 do you click 

1632
01:15:48,890 --> 01:15:49,880
I mean there's some

1633
01:15:49,880 --> 01:15:50,850
 that's just happening 

1634
01:15:51,390 --> 01:15:53,440
But here you've got to have consensus 

1635
01:15:54,080 --> 01:15:56,720
I know I didn't ask you a question about the hash function

1636
01:15:56,760 --> 01:16:01,530
 but if it were a hash function that had to be updated and everybody said they had to quickly update it 

1637
01:16:03,890 --> 01:16:04,430
There's

1638
01:16:04,440 --> 01:16:06,810
 there's interesting debates about this

1639
01:16:06,810 --> 01:16:10,870
 but you wouldn't need to go back over all 540000 previous

1640
01:16:11,880 --> 01:16:12,690
 blocks 

1641
01:16:12,700 --> 01:16:16,350
You could just hash all 540000 blocks

1642
01:16:16,430 --> 01:16:26,530
 180 GB to 1 256 or maybe it's then a different kind and then you'd have that and would be tamperproof 

1643
01:16:27,170 --> 01:16:28,610
So those are the key things 

1644
01:16:28,610 --> 01:16:29,500
That's what we covered

1645
01:16:29,500 --> 01:16:30,020
 really

1646
01:16:30,050 --> 01:16:33,290
 what we're going to cover next 

1647
01:16:33,290 --> 01:16:35,170
Tuesday's consensus protocol 

1648
01:16:35,180 --> 01:16:41,100
We've talked a lot about proof of work here because everybody thinks of Bitcoin about proof of work 

1649
01:16:41,570 --> 01:16:43,290
But we're going to talk about proof of work

1650
01:16:43,490 --> 01:16:46,950
 the nodes and the native currency and the next Thursday

1651
01:16:46,950 --> 01:16:48,830
 we're going to talk about transactions 

1652
01:16:48,850 --> 01:16:49,180
Again 

1653
01:16:49,190 --> 01:16:51,410
I try to break down this technology 

1654
01:16:52,660 --> 01:16:54,760
If you want to forget about this lecture and you're going to go

1655
01:16:54,820 --> 01:16:55,970
 oh my God

1656
01:16:55,970 --> 01:16:57,650
 it was like going to the dentist 

1657
01:16:59,020 --> 01:17:02,250
You could tell your friends that you actually know something about cryptography 

1658
01:17:02,250 --> 01:17:04,350
It is called cryptocurrencies 

1659
01:17:04,690 --> 01:17:07,000
So how can we not know something about cryptography 

1660
01:17:07,070 --> 01:17:08,990
But it's basically those three things 

1661
01:17:09,000 --> 01:17:10,450
It's cryptography 

1662
01:17:10,460 --> 01:17:12,410
It's a consensus mechanism 

1663
01:17:12,420 --> 01:17:16,040
And the so right cryptography

1664
01:17:16,270 --> 01:17:17,680
 consensus mechanism

1665
01:17:17,780 --> 01:17:18,880
 transactions 

1666
01:17:18,890 --> 01:17:19,700
And we'll get through 

1667
01:17:19,700 --> 01:17:24,110
And you'll see this matters to finance and whether it's got any use cases 

1668
01:17:24,130 --> 01:17:25,280
So thank you 

